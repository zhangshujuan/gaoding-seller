{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "_2",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "7d6d0f00-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "image" : null,
    "name" : "泰州左侧屏幕",
    "title" : "泰州左侧屏幕"
  },
  "widgets" : [ {
    "alias" : "_",
    "name" : "监测点位",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"box-voicetype\">\n    <div class=\"content\">\n        <div id='channel' class=\"value\">\n            <span class=\"tag\">点位: </span> <span id='channelvalue'></span>\n        </div>\n        <div id='position' class=\"value\">\n            <span class=\"tag\">位置:</span> <span id='positionvalue'></span>\n        </div>\n        <div id='leq' class=\"value\">\n            <span class=\"tag\">声压级/振动实际值:</span><span id='leqvalue'></span>\n        </div>\n        <div id='state' class=\"value\">\n            <span class=\"tag\">点位状态:</span><span id='statevalue'></span>\n        </div>\n    </div>\n</div>",
      "templateCss" : ".box-voicetype {\n    width: 456px;\n    height: 312px;\n    background-image: url(\"/C5085/tbresource/images/position.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n}\n\n.content {\n    background-color: transparent;\n    width: 428px;\n    height: 230px;\n    position: absolute;\n    margin-left: 14px;\n    margin-top: 59px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.value {\n    display: flex;\n    color: #C6D3EC;\n    align-items: center;\n    padding-left: 16px;\n    font-size: 24px;\n    font-family: 'PingFang SC-Medium';\n\n}\n.tag{\n    font-weight: bold;\n}",
      "controllerScript" : "var showleq = ''\nvar showairesult = ''\nvar isFirstFalse = false\nself.onInit = function() {\n    let channel = document.getElementById(\n        'channelvalue');\n    let positionDOM = document.getElementById(\n        'positionvalue');\n    self.ctx.leqDOM = document.getElementById(\n        'leqvalue');\n    self.ctx.stateDOM = document.getElementById(\n        'statevalue');\n    window.addEventListener('singleSensorSel', function(\n        event) {\n        isFirstFalse = true\n        if (event.key == \"singleSensorCurCh\") {\n            self.ctx.curCh = event.newValue + 1\n            self.ctx.oldCh = event.oldValue\n\n        } else if (event.key ==\n            \"singleSensorCurDev\") {\n            self.ctx.curDev = event.newValue\n            self.ctx.oldDev = event.oldValue\n        }\n        channel.innerHTML =\n            `${self.ctx.curDev}` +\n            `${self.ctx.curCh}` + '通道'\n        let position;\n        switch (self.ctx.curCh) {\n            case 1:\n            case 2:\n                position = '南侧'\n                break;\n            case 3:\n            case 4:\n                position = '西侧'\n                break;\n            case 5:\n            case 6:\n                position = '北侧'\n                break;\n            case 7:\n            case 8:\n                position = '东侧'\n                break;\n        }\n        positionDOM.style.fontSize = '24px'\n        positionDOM.innerHTML =\n            `${self.ctx.curDev}` +\n            `${position}`\n        if (self.ctx.curDev ==\n            'T041间隔') {\n            positionDOM.style.fontSize = '20px'\n            switch (self.ctx.curCh) {\n                case 0:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T04117接地闸刀A相`\n                    break;\n                case 1:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T0411闸刀A相`\n                    break;\n                case 2:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T041开关A相`\n                    break;\n                case 3:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T0412闸刀A相`\n                    break;\n                case 4:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T04127接地闸刀A相`\n                    break;\n                case 5:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T04117接地闸刀B相`\n                    break;\n                case 6:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T0411闸刀B相`\n                    break;\n                case 7:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T041开关B相`\n                    break;\n                case 8:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T0412闸刀B相`\n                    break;\n                case 9:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T04127接地闸刀B相`\n                    break;\n                case 10:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T04117接地闸刀C相`\n                    break;\n                case 11:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T0411闸刀C相`\n                    break;\n                case 12:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T041开关C相`\n                    break;\n                case 13:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T0412闸刀C相`\n                    break;\n                case 14:\n                    positionDOM.innerHTML =\n                        `1000kV 盱泰Ⅱ线T04127接地闸刀C相`\n                    break;\n            }\n        }\n    })\n\n}\n\nself.onDataUpdated = function() {\n    var curDevice = localStorage.getItem(\n        'singleSensorCurDev');\n    var curChannel = localStorage.getItem(\n        'singleSensorCurCh');\n    var leq = -99\n    var laf = -99\n    var peak = -99\n    var type = -99\n\n\n \n    for (var i = 0; i < self.ctx.data.length; i++) {\n        let curData = self.ctx.data[i];\n   \n        if (curData.datasource.entityName ==\n            curDevice) {\n            if (curData.dataKey.name === 'leq') {\n                if (curData.data[0][1]) {\n                    leq = curData.data[0][1].toFixed(1)\n\n                }\n            }\n            if (curData.dataKey.name === 'type') {\n     \n                    type = curData.data[0][1].toFixed(1)\n    \n            }\n            if (curData.dataKey.name === 'airesult') {\n                if (curData.data[0][1] != null) {\n                    airesult = curData.data[0][1]\n     \n                }\n            }\n            if (curData.dataKey.name === 'channelID') {\n                if (curChannel == curData.data[0][1]) {\n                    showleq = leq\n\n                    if (airesult == 0) {\n                        airesult = '正常'\n                    } else {\n                        airesult = '异常'\n                    }\n                    showairesult = airesult\n                }\n            }\n        }\n\n        // if (curData.dataKey.name === 'laf') {\n        //     if (curData.data[0][1]) {\n        //         laf = curData.data[0][1].toFixed(1)\n        //     }\n        // }\n        // if (curData.dataKey.name === 'peak') {\n        //     if (curData.data[0][1]) {\n        //         peak = curData.data[0][1].toFixed(1)\n        //     }\n        // }\n\n    }\n    if (isFirstFalse === true) {\n        self.ctx.leqDOM.innerHTML =\n            `${showleq}`\n        self.ctx.stateDOM.innerHTML =\n            `${showairesult}`\n    }\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"监测点位\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903898,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d7377a0-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_3",
    "name" : "仪表盘",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"box-voicetype\">\n    <div class=\"content\">\n        <ul id=\"myList\" class=\"modules\">\n            <li>\n                <div class=\"gauge\" id=\"gauge-leq\">\n                </div>\n            </li>\n            <li>\n                <div class=\"gauge\" id=\"gauge-laf\">\n                </div>\n            </li>\n            <li>\n                <div class=\"gauge\" id=\"gauge-peak\">\n                </div>\n            </li>\n            <li>\n                <div class=\"gauge\" id=\"gauge-laz\">\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>",
      "templateCss" : ".box-voicetype {\n    width: 456px;\n    height: 312px;\n    background-image: url(\"/C5085/tbresource/images/dashboard.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n}\n\n.content {\n    margin-left: 18px;\n    margin-top: 45px;\n    background-color: transparent;\n    width: 428px;\n    height: 230px;\n    position: absolute;\n}\n\n.gauge {\n    width: 100%;\n    height: 100%;\n}\n\nli {\n    width: 50%;\n    height: 130px;\n}\n\nul {\n    display: flex;\n    flex-wrap: wrap;\n    overflow: hidden;\n    list-style: none;\n    padding: 0;\n    margin-top: 0px;\n}",
      "controllerScript" : "let showtitilA, showtitilB, showtitilC, showtitilD\nlet unitVibtitil = 'm/s²'\nlet unitSound = 'dB'\nlet showunit = 'dB'\nlet maxSound = 100\nlet maxVibtitil = 1\nlet showmax = 100\n\nself.onInit = function() {\n    let SoundtitilA = '等效声压级'\n    let SoundtitilB = 'A计权声压级'\n    let SoundtitilC = 'A计权峰值'\n    let SoundtitilD = '健康度'\n    let VibtitilA = '实时有效值'\n    let VibtitilB = '指数平均'\n    let VibtitilC = '最大值'\n    let VibtitilD = '健康度'\n    let showtitilA, showtitilB, showtitilC, showtitilD\n\n\n\n    window.addEventListener('singleSensorSel', function(\n        event) {\n\n        if (event.key == \"singleSensorCurCh\") {\n            self.ctx.curCh = event.newValue\n            self.ctx.oldCh = event.oldValue\n\n\n        } else if (event.key ==\n            \"singleSensorCurDev\") {\n            self.ctx.curDev = event.newValue\n            self.ctx.oldDev = event.oldValue\n\n        }\n        if (self.ctx.curDev == 'T041间隔') {\n            showtitilA = VibtitilA\n            showtitilB = VibtitilB\n            showtitilC = VibtitilC\n            showtitilD = VibtitilD\n            showunit = unitVibtitil\n            showmax = maxVibtitil\n        } else {\n            if (self.ctx.curCh % 2 === 0) {\n                showtitilA = VibtitilA\n                showtitilB = VibtitilB\n                showtitilC = VibtitilC\n                showtitilD = VibtitilD\n                showunit = unitVibtitil\n                showmax = maxVibtitil\n\n            } else {\n                showtitilA = SoundtitilA\n                showtitilB = SoundtitilB\n                showtitilC = SoundtitilC\n                showtitilD = SoundtitilD\n                showunit = unitSound\n                showmax = maxSound\n            }\n        }\n        self.ctx.optionLeq.series[0].data[0]\n            .name =\n            showtitilA;\n        self.ctx.optionLeq.series[0].detail\n            .formatter = '{value}' + showunit,\n\n\n            self.ctx.guageLeq.setOption(self.ctx\n                .optionLeq);\n\n\n\n\n        self.ctx.optionLaf.series[0].data[0]\n            .name =\n            showtitilB;\n        self.ctx.optionLaf.series[0].detail\n            .formatter = '{value}' + showunit,\n            self.ctx.guageLaf.setOption(self.ctx\n                .optionLaf);\n        self.ctx.optionPeak.series[0].data[0]\n            .name =\n            showtitilC;\n        self.ctx.optionPeak.series[0].detail\n            .formatter = '{value}' + showunit,\n            self.ctx.guagePeak.setOption(self\n                .ctx\n                .optionPeak);\n        self.ctx.optionLaz.series[0].data[0]\n            .name =\n            showtitilD;\n        self.ctx.guageLaz.setOption(self.ctx\n            .optionLaz);\n\n    })\n    var dataArr = 55;\n    var colorSet = {\n        color: \"#468EFD\",\n    };\n    var optionLeq = {\n        // tooltip: {\n        //     formatter: '{b} : {c}'\n        // },\n        series: [{\n            type: 'gauge',\n            detail: {\n                formatter: 50 + showunit,\n                color: '#26F7FF',\n                fontSize: '18px',\n                offsetCenter: [0, 0],\n            },\n            pointer: {\n                show: false\n            },\n            title: {\n                show: true,\n                offsetCenter: [0, '95%'],\n                color: '#26F7FF',\n                fontSize: '20px',\n            },\n            axisLabel: {\n                show: false,\n                color: '#fff'\n            },\n\n            splitLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false\n            },\n            max: 100,\n            splitNumber: 10,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    width: 10,\n                    shadowBlur: 0,\n                    color: [\n                        [\n                            50 / 100,\n                            {\n                                type: 'linear',\n                                x: 0,\n                                y: 0,\n                                x2: 0,\n                                y2: 1,\n                                colorStops: [{\n                                        offset: 0,\n                                        color: '#2CE8AD',\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: '#104542',\n                                    },\n                                ],\n                                global: false,\n                            },\n                        ],\n                        [1, '#202E5C']\n                    ],\n                },\n            },\n            data: [{\n                value: 50,\n                name: showtitilA,\n\n            }]\n        }]\n    };\n    self.ctx.optionLeq = optionLeq;\n    var optionLaf = {\n        // tooltip: {\n        //     formatter: '{b} : {c}'\n        // },\n        series: [{\n            type: 'gauge',\n            detail: {\n                formatter: 50 + showunit,\n                color: '#26F7FF',\n                fontSize: '18px',\n                offsetCenter: [0, 0],\n            },\n            pointer: {\n                show: false\n            },\n            title: {\n                show: true,\n                offsetCenter: [0, '95%'],\n                color: '#26F7FF',\n                fontSize: '20px',\n            },\n            axisLabel: {\n                show: false,\n                color: '#fff'\n            },\n\n            splitLine: {\n                show: false,\n                lineStyle: {\n                    color: '#fff'\n                }\n            },\n            axisTick: {\n                show: false\n            },\n            max: 100,\n            splitNumber: 10,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    width: 10,\n                    shadowBlur: 0,\n                    color: [\n                        [\n                            50 / 100,\n                            {\n                                type: 'linear',\n                                x: 0,\n                                y: 0,\n                                x2: 0,\n                                y2: 1,\n                                colorStops: [{\n                                        offset: 0,\n                                        color: '#2CE8AD',\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: '#104542',\n                                    },\n                                ],\n                                global: false,\n                            },\n                        ],\n                        [1, '#202E5C']\n                    ],\n                },\n            },\n            data: [{\n                value: 50,\n                name: showtitilB,\n\n            }]\n        }]\n    };\n    self.ctx.optionLaf = optionLaf;\n    var optionPeak = {\n        // tooltip: {\n        //     formatter: '{b} : {c}'\n        // },\n        series: [{\n            type: 'gauge',\n            detail: {\n                formatter: 50 + showunit,\n                color: '#26F7FF',\n                fontSize: '18px',\n                offsetCenter: [0, 0],\n            },\n            pointer: {\n                show: false\n            },\n            title: {\n                show: true,\n                offsetCenter: [0, '95%'],\n                color: '#26F7FF',\n                fontSize: '20px',\n            },\n            axisLabel: {\n                show: false,\n                color: '#fff'\n            },\n\n            splitLine: {\n                show: false,\n                lineStyle: {\n                    color: '#fff'\n                }\n            },\n            axisTick: {\n                show: false\n            },\n            max: 100,\n            splitNumber: 10,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    width: 10,\n                    shadowBlur: 0,\n                    color: [\n                        [\n                            50 / 100,\n                            {\n                                type: 'linear',\n                                x: 0,\n                                y: 0,\n                                x2: 0,\n                                y2: 1,\n                                colorStops: [{\n                                        offset: 0,\n                                        color: '#2CE8AD',\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: '#104542',\n                                    },\n                                ],\n                                global: false,\n                            },\n                        ],\n                        [1, '#202E5C']\n                    ],\n                },\n            },\n            data: [{\n                value: 50,\n                name: showtitilC,\n\n            }]\n        }]\n    };\n    self.ctx.optionPeak = optionPeak;\n    var optionLaz = {\n        // tooltip: {\n        //     formatter: '{b} : {c}'\n        // },\n        series: [{\n            type: 'gauge',\n            detail: {\n                formatter: '{value}' + '%',\n                color: '#26F7FF',\n                fontSize: '18px',\n                offsetCenter: [0, 0],\n            },\n            pointer: {\n                show: false\n            },\n            title: {\n                show: true,\n                offsetCenter: [0, '95%'],\n                color: '#26F7FF',\n                fontSize: '20px',\n            },\n            axisLabel: {\n                show: false,\n                color: '#fff'\n            },\n\n            splitLine: {\n                show: false,\n                lineStyle: {\n                    color: '#fff'\n                }\n            },\n            axisTick: {\n                show: false\n            },\n            max: 100,\n            splitNumber: 10,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    width: 10,\n                    shadowBlur: 0,\n                    color: [\n                        [\n                            100 / 100,\n                            {\n                                type: 'linear',\n                                x: 0,\n                                y: 0,\n                                x2: 0,\n                                y2: 1,\n                                colorStops: [{\n                                        offset: 0,\n                                        color: '#2CE8AD',\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: '#104542',\n                                    },\n                                ],\n                                global: false,\n                            },\n                        ],\n                        [1, '#202E5C']\n                    ],\n                },\n            },\n            data: [{\n                value: 100,\n                name: showtitilD,\n\n            }]\n        }]\n    };\n    self.ctx.optionLaz = optionLaz;\n\n    var dom = document.getElementById('gauge-leq');\n    var guageLeq = echarts.init(dom, null, {\n        renderer: 'canvas',\n        useDirtyRect: false\n    });\n    if (optionLeq && typeof optionLeq === 'object') {\n        guageLeq.setOption(optionLeq);\n        self.ctx.guageLeq = guageLeq;\n    }\n\n    dom = document.getElementById('gauge-laf');\n    var guageLaf = echarts.init(dom, null, {\n        renderer: 'canvas',\n        useDirtyRect: false\n    });\n    if (optionLaf && typeof optionLaf === 'object') {\n        guageLaf.setOption(optionLaf);\n        self.ctx.guageLaf = guageLaf;\n    }\n\n    dom = document.getElementById('gauge-peak');\n    var guagePeak = echarts.init(dom, null, {\n        renderer: 'canvas',\n        useDirtyRect: false\n    });\n    if (optionPeak && typeof optionPeak === 'object') {\n        guagePeak.setOption(optionPeak);\n        self.ctx.guagePeak = guagePeak;\n    }\n\n    dom = document.getElementById('gauge-laz');\n    var guageLaz = echarts.init(dom, null, {\n        renderer: 'canvas',\n        useDirtyRect: false\n    });\n    if (optionLaz && typeof optionLaz === 'object') {\n        guageLaz.setOption(optionLaz);\n        self.ctx.guageLaz = guageLaz;\n    }\n    self.onResize();\n}\n\nvar leq = -99\nvar laf = -99\nvar peak = -99\nvar laz = -99\nlet showlaz = 100\nlet type = 1\nself.onDataUpdated = function() {\n    try {\n\n        var curDevice = localStorage.getItem(\n            'singleSensorCurDev');\n        var curChannel = localStorage.getItem(\n            'singleSensorCurCh');\n\n\n        for (var i = 0; i < self.ctx.data.length; i++) {\n\n            let curData = self.ctx.data[i];\n\n            if (curData.datasource.entityName ==\n                curDevice) {\n\n                if (curData.dataKey.name === 'leq') {\n                    if (curData.data[0][1]) {\n                        leq = curData.data[0][1]\n                            .toFixed(1)\n                    }\n                }\n                if (curData.dataKey.name === 'laf') {\n                    if (curData.data[0][1]) {\n                        laf = curData.data[0][1]\n                            .toFixed(1)\n                    }\n                }\n                if (curData.dataKey.name === 'peak') {\n                    if (curData.data[0][1]) {\n                        peak = curData.data[0][1]\n                            .toFixed(1)\n                    }\n                }\n\n                if (curData.dataKey.name ===\n                    'aiprobability') {\n\n                    laz = (curData.data[0][1]) * 100\n                    showlaz = laz .toFixed(1)\n\n                    if (showlaz != 0) {\n                        self.ctx.optionLaz.series[0]\n                            .axisLine\n                            .lineStyle\n                            .color[0][0] = showlaz /\n                            100;\n                        self.ctx.optionLaz.series[0]\n                            .data[0]\n                            .value =\n                            showlaz;\n                        self.ctx.guageLaz.setOption(\n                            self.ctx\n                            .optionLaz);\n                    }\n                }\n\n                if (curData.dataKey.name === 'type') {\n                    type = curData.data[0][1]\n            \n                }\n                if (curData.dataKey.name ===\n                    'channelID') {\n                    if (curChannel != curData.data[0][\n                        1]) {\n\n                        leq = -99\n                        laf = -99\n                        peak = -99\n                        laz = -99\n                    } else {\n\n                        leq = leq\n                        laf = laf\n                        peak = peak\n\n\n                    }\n                }\n            }\n        }\n\n        // 更新仪表盘\n        if (leq != -99) {\n            // let formatter = leq + `${showunit}`;\n\n            // self.ctx.optionLeq.series[0].detail.formatter =\n            //     formatter;\n            self.ctx.optionLeq.series[0].axisLine\n                .lineStyle\n                .color[0][0] = leq / showmax;\n            self.ctx.optionLeq.series[0].data[0].value =\n                leq;\n            self.ctx.guageLeq.setOption(self.ctx\n                .optionLeq);\n        }\n        if (laf != -99) {\n            // let formatter = laf + showunit;\n\n            // self.ctx.optionLaf.series[0].detail.formatter =\n            //     formatter;\n            self.ctx.optionLaf.series[0].axisLine\n                .lineStyle\n                .color[0][0] = laf / showmax;\n            self.ctx.optionLaf.series[0].data[0].value =\n                laf;\n            self.ctx.guageLaf.setOption(self.ctx\n                .optionLaf);\n        }\n        if (peak != -99) {\n            // let formatter = peak + showunit;\n\n            // self.ctx.optionPeak.series[0].detail.formatter =\n            //     formatter;\n\n            self.ctx.optionPeak.series[0].axisLine\n                .lineStyle\n                .color[0][0] = peak / showmax;\n            self.ctx.optionPeak.series[0].data[0]\n                .value =\n                peak;\n            self.ctx.guagePeak.setOption(self.ctx\n                .optionPeak);\n        }\n        if (laz != -99) {\n            // let formatter = laz + '%';\n\n            // self.ctx.optionlaz.series[0].detail.formatter =\n            //     formatter;\n\n            // self.ctx.optionLaz.series[0].axisLine\n            //     .lineStyle\n            //     .color[0][0] = showlaz / 100;\n            // self.ctx.optionLaz.series[0].data[0]\n            //     .value =\n            //     showlaz;\n            // self.ctx.guageLaz.setOption(self.ctx\n            //     .optionLaz);\n\n        }\n\n    } catch (e) {}\n\n}\n\nself.onResize = function() {\n    // self.ctx.guageLeq.resize({\n    //     width: self.ctx.width * 0.25,\n    //     height: self.ctx.height,\n    // })\n    // self.ctx.guagePeak.resize({\n    //     width: self.ctx.width * 0.25,\n    //     height: self.ctx.height,\n    // })\n    // self.ctx.guageLaf.resize({\n    //     width: self.ctx.width * 0.25,\n    //     height: self.ctx.height,\n    // })\n    // self.ctx.guageLaz.resize({\n    //     width: self.ctx.width * 0.25,\n    //     height: self.ctx.height,\n    // })\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"仪表盘\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903916,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d7636c0-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_6",
    "name" : "单通道波形图",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"container_bg\">\n    <div class=\"content\">\n       <div id=\"boxing-chart\"  style=\"width: 100%; height:100%; background-color: transparent;\"></div>\n    </div>\n</div>\n    ",
      "templateCss" : ".container_bg {\n    background-image: url(\"/C5085/tbresource/images/wave_bg.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n    width: 456px;\n    height: 312px;\n}\n\n.content {\n    background-color: transparent;\n    width: 428px;\n    height: 230px;\n    position: absolute;\n    margin-left: 14px;\n    margin-top: 59px;\n}",
      "controllerScript" : "var allDeviceID = {\n    '#1主变A相': \"aa\", //#1主变A相\n    '#1主变B相': \"bb\", //#1主变B相\n    '#1主变C相': \"cc\", //#1主变C相\n    'T041间隔': \"tt\" //T041间隔\n};\nconst methodStop = 'WAVSTOP';\nconst methodStart = 'WAVSTART';\n\n// RPC函数\nfunction controlWav(deviceID, method, ch) {\n    var url =\n        '/C5085/api/plugins/rpc/twoway/' +\n        deviceID;\n    var payload = {\n        method: method,\n        params: ch\n    };\n    var username = self.ctx.settings.username;\n    var password = self.ctx.settings.password;\n    var auth = 'Basic ' + btoa(username + ':' +\n        password);\n    var jwtToken = localStorage.getItem(\n        'jwt_token');\n    var bearer = 'Bearer ' + jwtToken;\n    var headers = {\n        'Content-Type': 'application/json',\n        'Authorization': auth,\n        'X-Authorization': bearer\n    };\n    $.ajax({\n        url: url,\n        type: 'POST',\n        headers: headers,\n        data: JSON.stringify(\n            payload),\n        success: function(\n            response) {\n            console.log(\n                response);\n        },\n        error: function(xhr, status,\n            error) {\n            console.error(xhr\n                .responseText\n            );\n        }\n    });\n}\n// 防抖\nvar timer = null\n\nfunction debounce(fn, wait) {\n    return function() {\n        if (timer !== null) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(fn, wait)\n    }\n}\n// 触发RPC的函数，供防抖函数调用\nfunction triggerRPC() {\n    console.log('----debounce test----')\n    console.log('self.ctx.curCh', self.ctx.curCh)\n    console.log('self.ctx.oldCh', self.ctx.oldCh)\n    console.log('self.ctx.curDev', self.ctx.curDev)\n    console.log('self.ctx.oldDev', self.ctx.oldDev)\n    // 先停掉上一个\n    controlWav(allDeviceID[self.ctx.oldDev], methodStop,\n        self.ctx.oldCh)\n    // 再上送当前的\n    controlWav(allDeviceID[self.ctx.curDev], methodStart,\n        self.ctx.curCh)\n}\n\nself.onInit = function() {\n    //加载设置\n    allDeviceID['#1主变A相'] = self.ctx.settings.phaseAID;\n    allDeviceID['#1主变B相'] = self.ctx.settings.phaseBID;\n    allDeviceID['#1主变C相'] = self.ctx.settings.phaseCID;\n    allDeviceID['T041间隔'] = self.ctx.settings.phaseTID;\n\n    // 重写setItem事件\n    var orignSetItem = window.localStorage.setItem;\n    window.localStorage.setItem = function(key,\n        newValue, oldValue) {\n        var newSetItemEvent = new Event(\n            \"singleSensorSel\");\n\n        newSetItemEvent.key = key\n        newSetItemEvent.newValue = newValue;\n        newSetItemEvent.oldValue = localStorage\n            .getItem(key);\n\n        window.dispatchEvent(\n            newSetItemEvent); // 抛出自定义事件\n        orignSetItem.apply(this, [key, newValue,\n            oldValue\n        ]);\n    }\n    //监听localStorage变化\n    window.addEventListener('singleSensorSel', function(\n        event) {\n\n        if (event.key == \"singleSensorCurCh\") {\n            self.ctx.curCh = event.newValue\n            self.ctx.oldCh = event.oldValue\n            let fun = debounce(triggerRPC, 200)\n            fun()\n        } else if (event.key ==\n            \"singleSensorCurDev\") {\n            self.ctx.curDev = event.newValue\n            self.ctx.oldDev = event.oldValue\n            let fun = debounce(triggerRPC, 200)\n            fun()\n        }\n    })\n\n    // 初始化波形图\n    var chartDom = document.getElementById(\n        'boxing-chart');\n    var mychart = echarts.init(chartDom, null, {\n        renderer: 'svg'\n    });\n    var option = {\n        // backgroundColor: \"#060e19\",\n        color: [\"#04CDF4\"],\n        legend: {\n            show: false\n        },\n        xAxis: {\n            type: \"category\",\n            axisLine: {\n                lineStyle: {\n                    color: \"#65C6E7 \",\n                },\n            },\n\n            boundaryGap: true,\n            splitLine: {\n                show: false,\n            },\n            axisLabel: {\n                // interval: 0\n                show: true\n            },\n            data: [],\n        },\n        grid: {\n            left: \"3%\",\n            right: \"4%\",\n            top: \"12%\",\n            bottom: \"4%\",\n            containLabel: true,\n        },\n        yAxis: {\n            // max: 0.0004,\n            // min: 0,\n            // inverse: true,\n            name: 'dB',\n            nameTextStyle: {\n                color: \"#909090\",\n                padding: [20, 0, -10, 0],\n            },\n            splitLine: {\n                lineStyle: {\n                    color: \"#65C6E7 \",\n                },\n            },\n\n            nameTextStyle: {\n                color: '#fff',\n            },\n            axisLabel: {\n                formatter: function(value) {\n                    if (value != 0) {\n                        return 20 * Math.log10(\n                                Math.abs(value))\n                            .toFixed(1)\n                            .toString();\n                    }\n\n                },\n                textStyle: {\n                    color: \"#65ABE7 \",\n                },\n            },\n        },\n        series: [{\n            symbol: 'none',\n            type: \"line\",\n            data: [0, 1, 2, 3],\n        }, ],\n        animation: false,\n    };\n    option && mychart.setOption(option);\n    self.ctx.mychart = mychart;\n\n    self.onResize();\n}\n\nself.onDataUpdated = function() {\n    var mychart = self.ctx.mychart;\n    var option = mychart.getOption();\n    var dataX = [];\n    var dataY = [];\n    // console.log('self.ctx.data', self.ctx.data);\n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var currentDeviceData = self.ctx.data[i];\n        if (currentDeviceData.datasource.name ===\n            self.ctx.curDev) {\n            var dataSet = currentDeviceData.data;\n            for (var d = 0; d < dataSet.length; d++) {\n                var tsValuePair = dataSet[d];\n                var ts = tsValuePair[0];\n                if (tsValuePair[1] != '') {\n                    var value = JSON.parse(tsValuePair[\n                        1]);\n                    var waveData = value[\"wave\"];\n                    for (var j = 0; j < waveData\n                        .length; j++) {\n                        dataX.push(j.toString());\n                        dataY.push(waveData[j]);\n                    }\n                }\n            }\n        }\n    }\n    mychart.setOption({\n        xAxis: {\n            data: dataX,\n        },\n        series: [{\n            name: \"boxing\",\n            data: dataY\n        }],\n    });\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n    controlWav(allDeviceID[self.ctx.curDev], methodStop,\n        self.ctx.curCh)\n}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"phaseAID\": {\n                \"title\": \"#1主变A相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"aa\"\n            },\n            \"phaseBID\": {\n                \"title\": \"#1主变B相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"bb\"\n            },\n            \"phaseCID\": {\n                \"title\": \"#1主变C相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"cc\"\n            },\n            \"phaseTID\": {\n                \"title\": \"T041间隔的设备id\",\n                \"type\": \"string\",\n                \"default\": \"tt\"\n            },\n            \"username\": {\n                \"title\": \"thingboard登录用户名\",\n                \"type\": \"string\",\n                \"default\": \"crysound@crysound.com\"\n            },\n            \"password\": {\n                \"title\": \"thingboard登录密码\",\n                \"type\": \"string\",\n                \"default\": \"crysound\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"phaseAID\",\n        \"phaseBID\",\n        \"phaseCID\",\n        \"phaseTID\",\n        \"username\",\n        \"password\"\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"单通道波形图\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903911,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d757370-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_92",
    "name" : "滚动语谱图",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/lightingchart.js"
      }, {
        "url" : "/C5085/tbresource/dsp.js"
      } ],
      "templateHtml" : "\n<div class=\"container_bg\">\n    <div class=\"content\">\n       <div id=\"Spectrogram\"  style=\"width: 100%; height:100%; background-color: transparent;\"></div>\n    </div>\n</div>",
      "templateCss" : ".container_bg {\n    background-image: url(\"/C5085/tbresource/images/Spectrogram_bg.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n    width: 456px;\n    height: 312px;\n}\n\n.content {\n    background-color: transparent;\n    width: 428px;\n    height: 230px;\n    position: absolute;\n    margin-left: 14px;\n    margin-top: 59px;\n}",
      "controllerScript" : "let bfirstDataComing = false\nlet spectrogramData = []\nlet sampleRate = 64000;\nlet frameBufferLength = 2048;\nlet fft = null;\n\nself.onInit = function() {\n    window.addEventListener('singleSensorSel', function(\n        event) {\n        isFirstFalse = true;\n    })\n    const {\n        lightningChart,\n        PalettedFill,\n        LUT,\n        emptyLine,\n        AxisScrollStrategies,\n        AxisTickStrategies,\n        regularColorSteps,\n        LegendBoxBuilders,\n        SolidLine,\n        SolidFill,\n        ColorHEX,\n        ColorRGBA,\n        emptyFill,\n        UIOrigins,\n        Themes,\n    } = lcjs\n    var dom = self.ctx.$container;\n    dom.width(self.ctx.width);\n    dom.height(self.ctx.height);\n    // Length of single data sample.\n    const dataSampleSize = 1024\n    // Sampling rate as samples per second.\n    const sampleRateHz = 1 / 2\n    const sampleIntervalMs = 1000 /\n        sampleRateHz\n    var chartDom = document.getElementById(\n        'Spectrogram');\n    // Create ChartXY.\n    const chart = lightningChart()\n        .ChartXY({\n            container: chartDom,\n        })\n        .setTitle(\n            'Scrolling Heatmap Spectrogram')\n    chart.engine.setBackgroundFillStyle(\n        emptyFill)\n    chart.setSeriesBackgroundFillStyle(\n        new SolidFill({\n            color: ColorRGBA(0, 0,\n                0, 0)\n        })).setBackgroundFillStyle(\n        new SolidFill({\n            color: ColorRGBA(0, 0,\n                0, 0)\n        }))\n    chart\n        .getDefaultAxisX()\n        // .setTitle('时间(s)')\n        // Setup progressive scrolling Axis.\n        .setScrollStrategy(\n            AxisScrollStrategies\n            .progressive)\n        .setInterval({\n            start: -300 * 1000,\n            end: 0,\n            stopAxisAfter: false\n        })\n        .setTickStrategy(AxisTickStrategies\n            .Time)\n    chart.setPadding({\n        left: 10,\n        top: 0,\n        right: 30,\n        bottom: 0,\n    }).setMouseInteractions(false)\n\n    chart\n        .getDefaultAxisY()\n        // .setTitle('频率(Hz)')\n        .setTickStrategy(AxisTickStrategies\n            .Numeric, (\n                strategy) =>\n            strategy\n            // Format ticks with units.\n            .setFormattingFunction((Fre) =>\n                String(Fre\n                    .toFixed(1) * 32 /\n                    1000 + 'k'))\n        )\n    chart.setTitle('    ')\n\n    const theme = chart.getTheme()\n\n    const lut = new LUT({\n        steps: regularColorSteps(-120,\n            0, theme\n            .examples\n            .spectrogramColorPalette\n        ),\n        units: 'dB',\n        interpolate: true,\n    })\n    const paletteFill = new PalettedFill({\n        lut,\n        lookUpProperty: 'value'\n    })\n\n    // Create Scrolling Heatmap Grid Series.\n    const heatmapSeries = chart\n        .addHeatmapScrollingGridSeries({\n            scrollDimension: 'columns',\n            resolution: dataSampleSize,\n            start: {\n                x: 0,\n                y: 0\n            },\n            step: {\n                x: sampleIntervalMs,\n                y: 1\n            },\n        })\n        .setFillStyle(paletteFill)\n        .setWireframeStyle(emptyLine)\n        // Configure automatic data cleaning.\n        .setDataCleaning({\n            // Out of view data can be lazily removed as long as total columns count remains over 1000.\n            minDataPointCount: 3000,\n        }).setName(' ')\n\n    // Add LegendBox to chart.\n    let legend = chart\n        .addLegendBox(LegendBoxBuilders\n            .HorizontalLegendBox)\n        // Dispose example UI elements automatically if they take too much space. This is to avoid bad UI on mobile / etc. devices.\n        .setAutoDispose({\n            type: 'max-width',\n            maxWidth: 0.6,\n        })\n        .setTitle(' ')\n        .add(chart)\n        .setPosition({\n            x: 80,\n            y: 107\n        })\n        .setOrigin(UIOrigins.CenterTop)\n        .setBackground((background) =>\n            background\n            .setFillStyle(emptyFill)\n            .setStrokeStyle(\n                emptyLine))\n    let zeroArray = new Array(1024).fill(0)\n    let tStart = window.performance.now()\n    let pushedDataCount = 0\n\n    const streamData = () => {\n        if (bfirstDataComing) {\n            const tNow = window\n                .performance.now()\n            const\n                shouldBeDataPointCount =\n                Math\n                .floor((sampleRateHz * (\n                    tNow -\n                    tStart)) / 1000)\n\n            const newDataPointsCount =\n                Math.min(\n                    shouldBeDataPointCount -\n                    pushedDataCount, 100\n                )\n            if (newDataPointsCount >\n                0) {\n                const newDataPoint = []\n                for (let i = 0; i <\n                    newDataPointsCount; i++\n                ) {\n                    let firstEle = spectrogramData\n                        .shift()\n                    if (firstEle) {\n                        newDataPoint.push(\n                            firstEle)\n                    }\n                    // newDataPoint.push(\n                    //     firstEle ?\n                    //     firstEle :\n                    //     zeroArray)\n                }\n                heatmapSeries\n                    .addIntensityValues(\n                        newDataPoint)\n                pushedDataCount +=\n                    newDataPointsCount\n            }\n        }\n        requestAnimationFrame(\n            streamData)\n    }\n    streamData()\n    self.ctx.chart = chart\n\n}\nlet isFirstFalse = false;\n\nself.onDataUpdated = function() {\n    if (isFirstFalse === true) {\n        var curDev = localStorage.getItem(\n            'singleSensorCurDev')\n        var size = 0\n        let signal = []\n        for (var i = 0; i < self.ctx.data.length; i++) {\n            var currentDeviceData = self.ctx.data[i]\n            if (currentDeviceData.datasource.name ===\n                curDev) {\n                var dataSet = currentDeviceData.data\n                for (var d = 0; d < dataSet\n                    .length; d++) {\n                    var tsValuePair = dataSet[d];\n                    var ts = tsValuePair[d]\n                    if (tsValuePair[1] != '') {\n                        var value = JSON.parse(\n                            tsValuePair[\n                                1])\n                        size = value['size']\n                        var waveData = value['wave']\n                        for (var j = 0; j <\n                            frameBufferLength; j++) {\n                            var perValue = j < waveData\n                                .length ? waveData[j] :\n                                0\n                            signal.push(perValue)\n                        }\n                    }\n                }\n            }\n        }\n\n        if (size == 0) {\n            return\n        }\n\n\n        fft = new FFT(frameBufferLength, sampleRate);\n        fft.forward(signal)\n\n\n        let temp = []\n        for (let i = 0; i < 1024; i++) {\n            temp.push(20 * Math.log10(fft\n                .spectrum[i]))\n        }\n\n\n        if (bfirstDataComing === false) {\n            bfirstDataComing = true\n\n        }\n        spectrogramData.push(temp)\n    }\n\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n    self.ctx.chart.dispose\n}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"phaseAID\": {\n                \"title\": \"#1主变A相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"aa\"\n            },\n            \"phaseBID\": {\n                \"title\": \"#1主变B相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"bb\"\n            },\n            \"phaseCID\": {\n                \"title\": \"#1主变C相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"cc\"\n            },\n            \"phaseTID\": {\n                \"title\": \"T041间隔的设备id\",\n                \"type\": \"string\",\n                \"default\": \"tt\"\n            },\n            \"username\": {\n                \"title\": \"thingboard登录用户名\",\n                \"type\": \"string\",\n                \"default\": \"crysound@crysound.com\"\n            },\n            \"password\": {\n                \"title\": \"thingboard登录密码\",\n                \"type\": \"string\",\n                \"default\": \"crysound\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"phaseAID\",\n        \"phaseBID\",\n        \"phaseCID\",\n        \"phaseTID\",\n        \"username\",\n        \"password\"\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"滚动语谱图\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903915,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d760fb0-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_v1_02",
    "name" : "设备健康度v1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"box-voicetype\">\n    <div class=\"content\">\n        <ul id=\"myList\" class=\"modules\">\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"PRPD\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            #1主变A相健康度\n                        </div>\n                        <div id=\"Avalue\" class=\"value\">\n                           100\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"DCP\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                           #1主变C相健康度\n                        </div>\n                        <div id=\"Cvalue\" class=\"value\">\n                            100\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div class=\"inner-container\">\n                            <div id=\"Short_circuit_shock_current\"\n                                class=\"inner-container\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                             #1主变B相健康度\n                        </div>\n                        <div id=\"Bvalue\"\n                            class=\"value\">\n                            100\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"Over_Load\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            T041间隔健康度\n                        </div>\n                        <div id=\"Dvalue\"\n                            class=\"value\">\n                            100\n                        </div>\n                    </div>\n                </div>\n            </li>\n\n        </ul>\n\n    </div>\n</div>",
      "templateCss" : ".box-voicetype {\n    width: 594px;\n    height: 240px;\n    background-image: url(\"/C5085/tbresource/images/device_health.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n}\n\n.content {\n    margin-left: 18px;\n    margin-top: 58px;\n    background-color: transparent;\n    width: 558px;\n    height: 163px;\n    position: absolute;\n}\n\nli {\n    width: 50%;\n    height: 72px;\n    margin-bottom: 10px;\n\n}\n\nul {\n    display: flex;\n    flex-wrap: wrap;\n    overflow: hidden;\n    list-style: none;\n    padding: 0;\n    margin-top: 0px;\n\n}\n\n.container {\n    width: 100%;\n    display: inline-flex;\n}\n\n.box1 {\n    display: inline-block;\n    width: 72px;\n    height: 72px;\n    background-color: transparent;\n    border: 0.5px solid;\n    border-image: linear-gradient(to right, #5DE2FF, #648AFD) 1;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 1);\n    position: relative;\n\n}\n\n.inner-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 60px;\n    height: 60px;\n    background-color: transparent;\n\n}\n\n.box2 {\n    width: calc(100% - 72px);\n    height: 72px;\n    background-color: transparent;\n    margin-top: 0px;\n    margin-left: 2px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.name {\n    display: flex;\n    height: 32px;\n    background: linear-gradient(to right, #214D54, #19282E);\n    color: white;\n    /*justify-content: center;*/\n    align-items: center;\n    padding-left: 16px;\n    font-size: 16px;\n    font-family: 'PingFang SC-Medium';\n    border: 2px solid;\n    border-image: linear-gradient(to right, #26646C, #19282E) 1;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.5);\n}\n\n.value {\n    display: flex;\n    height: 32px;\n    background: linear-gradient(to right, #214D54, #19282E);\n    color: white;\n    align-items: center;\n    padding-left: 16px;\n    font-size: 16px;\n    font-family: 'PingFang SC-Medium';\n    border: 2px solid;\n    border-image: linear-gradient(to right, #26646C, #19282E) 1;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.5);\n}\n\n#PRPD {\n    background-image: url(\"/C5085/tbresource/images/PRPD.png\");\n}\n\n#DCP {\n    background-image: url(\"/C5085/tbresource/images/DCP.png\");\n}\n\n#Short_circuit_shock_current {\n    background-image: url(\"/C5085/tbresource/images/Short_circuit_shock_current.png\");\n}\n\n#Over_Load {\n    background-image: url(\"/C5085/tbresource/images/Over_Load.png\");\n}\n\n#cooling_apparatus {\n    background-image: url(\"/C5085/tbresource/images/cooling_apparatus.png\");\n}\n\n#Loose_clamp {\n    background-image: url(\"/C5085/tbresource/images/Loose_clamp.png\");\n}\n\n#Low_health {\n    background-image: url(\"/C5085/tbresource/images/Low_health.png\");\n}",
      "controllerScript" : "function timestampToTime(timestamp) {\n    var date = new Date(\n        timestamp); //时间戳为10位需*1000，时间戳为13位的话不需乘1000\n    var Y = date.getFullYear() + '-';\n    var M = (date.getMonth() + 1 < 10 ? '0' + (date\n        .getMonth() + 1) : date.getMonth() + 1) + '-';\n    var D = (date.getDate() < 10 ? '0' + date.getDate() :\n        date.getDate()) + ' ';\n    var h = (date.getHours() < 10 ? '0' + date.getHours() :\n        date.getHours()) + ':';\n    var m = (date.getMinutes() < 10 ? '0' + date\n        .getMinutes() : date.getMinutes()) + ':';\n    var s = date.getSeconds() < 10 ? '0' + date\n        .getSeconds() : date.getSeconds();\n    return Y + M + D + h + m + s;\n}\n\nfunction AlarmFunc(name) {\n    var timestamp = Date.now();\n\n    let url = \"http://\" + window.location.hostname + ':' +\n        window.location.port + '/C5085/tb/api/V1/queryalarm'\n    // let url = \"http://192.168.0.98:2345/tb/api/V1/queryalarm\"\n    let payload = {\n        token: \"uGIqAm5ithidktkMVQWw\",\n        url: \"http://192.168.11.203:8090\",\n        devicename: name,\n        starttime: timestampToTime(timestamp -\n            86400000*30),\n        endtime: timestampToTime(timestamp)\n    }\n    $.ajax({\n        url: url,\n        type: 'POST',\n        data: JSON.stringify(payload),\n        success: function(response) {\n            // console.log(response)\n        },\n        error: function(xhr, status, error) {\n            console.error(xhr.responseText)\n        }\n    })\n}\n\n\nself.onInit = function() {\n    setTimeout(function() {\n        localStorage.setItem(\n            'singleSensorCurDev', '#1主变C相')\n        localStorage.setItem(\n            'singleSensorCurCh', 7)\n\n    }, 2000);\n\n    function ajaxRequest() {\n        return new Promise(function(resolve,\n            reject) {\n            // 模拟异步请求\n            AlarmFunc(\"#1主变C相\")\n        });\n    }\n    self.ctx.time = setInterval(() => {\n\n        // ajaxRequest().then(AlarmFunc(\"#1主变B相\"))\n        //     .then(AlarmFunc(\"#1主变A相\")).then(\n        //         AlarmFunc(\"T041间隔\"))\n        for (let i = 0; i < self.ctx.data\n            .length; i++) {\n            let name = self.ctx.data[i].dataKey\n                .label\n            if (name == '#1主变A相') {\n\n                let chartDom = document\n                    .getElementById(\n                        'Avalue');\n                const obj = JSON.parse(self.ctx\n                    .data[i]\n                    .data[0][1]);\n                if (obj.length == 0) {\n                    chartDom.innerHTML = 100\n                } else {\n                    let sum = 0\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        sum = sum + obj[i].count\n                    }\n\n                    if (sum > 100) {\n                        chartDom.innerHTML = 0\n                    } else {\n                        chartDom.innerHTML =\n                            100 - sum\n                    }\n                }\n            } else if (name == '#1主变B相') {\n                let chartDom = document\n                    .getElementById(\n                        'Bvalue');\n                const obj = JSON.parse(self.ctx\n                    .data[i]\n                    .data[0][1]);\n                if (obj.length == 0) {\n                    chartDom.innerHTML = 100\n                } else {\n                    let sum = 0\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        sum = sum + obj[i].count\n                    }\n\n                    if (sum > 100) {\n\n                        chartDom.innerHTML = 0\n                    } else {\n                        chartDom.innerHTML =\n                            100 - sum\n                    }\n\n                }\n\n            } else if (name == '#1主变C相') {\n                let chartDom = document\n                    .getElementById(\n                        'Cvalue');\n                const obj = JSON.parse(self.ctx\n                    .data[i]\n                    .data[0][1]);\n                if (obj.length == 0) {\n                    chartDom.innerHTML = 100\n                } else {\n                    let sum = 0\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        sum = sum + obj[i].count\n                    }\n                    if (sum > 100) {\n                        chartDom.innerHTML = 0\n                    } else {\n                        chartDom.innerHTML =\n                            100 - sum\n                    }\n                }\n            } else if (name == 'T041间隔') {\n                let chartDom = document\n                    .getElementById(\n                        'Dvalue');\n                const obj = JSON.parse(self.ctx\n                    .data[i]\n                    .data[0][1]);\n                if (obj.length == 0) {\n                    chartDom.innerHTML = 100\n                } else {\n                    let sum = 0\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        sum = sum + obj[i].count\n                    }\n                    if (sum > 100) {\n                        chartDom.innerHTML = 0\n                    } else {\n                        chartDom.innerHTML =\n                            100 - sum\n                    }\n                }\n            }\n        }\n    }, 10000)\n}\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n    clearInterval(self.ctx.time)\n}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"设备健康度v1.0\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903884,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d7154c0-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_v1_022",
    "name" : "事件统计V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"box-voicetype\">\n    <div class=\"content\">\n        <ul id=\"myList\" class=\"modules\">\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"PRPD\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            局部放电\n                        </div>\n                        <div id=\"PRPDvalue\" class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"DCP\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            直流偏磁\n                        </div>\n                        <div id=\"DCPvalue\" class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div class=\"inner-container\">\n                            <div id=\"Short_circuit_shock_current\"\n                                class=\"inner-container\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            短路冲击\n                        </div>\n                        <div id=\"Short_circuit_shock_currentvalue\"\n                            class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"Over_Load\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            重过载\n                        </div>\n                        <div id=\"Over_Loadvalue\"\n                            class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"cooling_apparatus\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            冷却器异响\n                        </div>\n                        <div id=\"cooling_apparatusvalue\"\n                            class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"Loose_clamp\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            夹件松动\n                        </div>\n                        <div id=\"Loose_clampvalue\"\n                            class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <div class=\"container\">\n                    <div class=\"box1\">\n                        <div id=\"Low_health\"\n                            class=\"inner-container\">\n                        </div>\n                    </div>\n                    <div class=\"box2\">\n                        <div class=\"name\">\n                            低健康度\n                        </div>\n                        <div id=\"Low_healthvalue\" class=\"value\">\n                            0\n                        </div>\n                    </div>\n                </div>\n            </li>\n        </ul>\n\n    </div>\n</div>",
      "templateCss" : ".box-voicetype {\n    width:789px;\n    height: 240px;\n    background-image: url(\"/C5085/tbresource/images/event_bg.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n}\n\n.content {\n    margin-left: 18px;\n    margin-top: 58px;\n    background-color: transparent;\n    width: 753px;\n    height: 163px;\n    position: absolute;\n}\n\nli {\n    width: 25%;\n    height: 72px;\n    margin-bottom: 10px;\n\n}\n\nul {\n    display: flex;\n    flex-wrap: wrap;\n    overflow: hidden;\n    list-style: none;\n    padding: 0;\n    margin-top: 0px;\n\n}\n\n.container {\n    width: 100%;\n    display: inline-flex;\n}\n\n.box1 {\n    display: inline-block;\n    width: 72px;\n    height: 72px;\n    background-color: transparent;\n    border: 0.5px solid;\n    border-image: linear-gradient(to right, #5DE2FF, #648AFD) 1;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 1);\n    position: relative;\n\n}\n\n.inner-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 60px;\n    height: 60px;\n    background-color: transparent;\n\n}\n\n.box2 {\n    width: calc(100% - 72px);\n    height: 72px;\n    background-color: transparent;\n    margin-top: 0px;\n    margin-left: 2px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.name {\n    display: flex;\n    height: 32px;\n    background: linear-gradient(to right, #214D54, #19282E);\n    color: white;\n    /*justify-content: center;*/\n    align-items: center;\n    padding-left: 16px;\n    font-size: 16px;\n    font-family: 'PingFang SC-Medium';\n    border: 2px solid;\n    border-image: linear-gradient(to right, #26646C, #19282E) 1;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.5);\n}\n\n.value {\n    display: flex;\n    height: 32px;\n    background: linear-gradient(to right, #214D54, #19282E);\n    color: white;\n    align-items: center;\n    padding-left: 16px;\n    font-size: 16px;\n    font-family: 'PingFang SC-Medium';\n    border: 2px solid;\n    border-image: linear-gradient(to right, #26646C, #19282E) 1;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.5);\n}\n\n#PRPD {\n    background-image: url(\"/C5085/tbresource/images/PRPD.png\");\n}\n\n#DCP {\n    background-image: url(\"/C5085/tbresource/images/DCP.png\");\n}\n\n#Short_circuit_shock_current {\n    background-image: url(\"/C5085/tbresource/images/Short_circuit_shock_current.png\");\n}\n\n#Over_Load {\n    background-image: url(\"/C5085/tbresource/images/Over_Load.png\");\n}\n\n#cooling_apparatus {\n    background-image: url(\"/C5085/tbresource/images/cooling_apparatus.png\");\n}\n\n#Loose_clamp {\n    background-image: url(\"/C5085/tbresource/images/Loose_clamp.png\");\n}\n\n#Low_health {\n    background-image: url(\"/C5085/tbresource/images/Low_health.png\");\n}",
      "controllerScript" : "function timestampToTime(timestamp) {\n    var date = new Date(\n        timestamp); //时间戳为10位需*1000，时间戳为13位的话不需乘1000\n    var Y = date.getFullYear() + '-';\n    var M = (date.getMonth() + 1 < 10 ? '0' + (date\n        .getMonth() + 1) : date.getMonth() + 1) + '-';\n    var D = (date.getDate() < 10 ? '0' + date.getDate() :\n        date.getDate()) + ' ';\n    var h = (date.getHours() < 10 ? '0' + date.getHours() :\n        date.getHours()) + ':';\n    var m = (date.getMinutes() < 10 ? '0' + date\n        .getMinutes() : date.getMinutes()) + ':';\n    var s = date.getSeconds() < 10 ? '0' + date\n        .getSeconds() : date.getSeconds();\n    return Y + M + D + h + m + s;\n}\n\nfunction AlarmFunc(name) {\n    var timestamp = Date.now();\n\n    let url = \"http://\" + window.location.hostname +':'+window.location.port+'/C5085/tb/api/V1/queryalarm'\n    let payload = {\n        token: \"uGIqAm5ithidktkMVQWw\",\n         url: \"http://192.168.11.203:8090\",\n        devicename: name,\n        starttime: timestampToTime(timestamp -\n            86400000*30),\n        endtime: timestampToTime(timestamp)\n    }\n    $.ajax({\n        url: url,\n        type: 'POST',\n        data: JSON.stringify(payload),\n        success: function(response) {\n            // console.log(response)\n        },\n        error: function(xhr, status, error) {\n            console.error(xhr.responseText)\n        }\n    })\n}\nlet aicount = {\n    Loose_clampvalue: 'B01',\n    cooling_apparatusvalue: 'B02',\n    Over_Loadvalue: 'B03',\n    Short_circuit_shock_currentvalue: 'B04',\n    PRPDvalue: 'B05',\n    DCPvalue: 'B06'\n}\nlet sumcount = {\n    B01: 0,\n    B02: 0,\n    B03: 0,\n    B04: 0,\n    B05: 0,\n    B06: 0\n}\nlet acount = {\n    B01: 0,\n    B02: 0,\n    B03: 0,\n    B04: 0,\n    B05: 0,\n    B06: 0\n}\nlet bcount = {\n    B01: 0,\n    B02: 0,\n    B03: 0,\n    B04: 0,\n    B05: 0,\n    B06: 0\n}\nlet ccount = {\n    B01: 0,\n    B02: 0,\n    B03: 0,\n    B04: 0,\n    B05: 0,\n    B06: 0\n}\nlet tcount = {\n    B01: 0,\n    B02: 0,\n    B03: 0,\n    B04: 0,\n    B05: 0,\n    B06: 0\n}\nself.onInit = function() {\n    function ajaxRequest() {\n        return new Promise(function(resolve, reject) {\n            // 模拟异步请求\n            AlarmFunc(\"#1主变C相\")\n        });\n    }\n    self.ctx.time = setInterval(() => {\n        ajaxRequest().then(AlarmFunc(\"#1主变B相\"))\n            .then(\n                AlarmFunc(\"#1主变A相\")).then(\n                AlarmFunc(\"T041间隔\"))\n        for (let i = 0; i < self.ctx.data\n            .length; i++) {\n            let name = self.ctx.data[i].dataKey\n                .label\n\n            if (name == '#1主变A相') {\n                const obj = JSON.parse(self.ctx\n                    .data[i].data[0][1]);\n                if (obj.length == 0) {\n                    acount = {\n                        B01: 0,\n                        B02: 0,\n                        B03: 0,\n                        B04: 0,\n                        B05: 0,\n                        B06: 0\n                    }\n                } else {\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        switch (obj[i].aiType) {\n                            case 'B01':\n                                acount.B01 =\n                                    obj[i].count\n                                break;\n                            case 'B02':\n                                acount.B02 =\n                                    obj[i].count\n                                break;\n                            case 'B03':\n                                acount.B03 =\n                                    obj[i].count\n                                break;\n                            case 'B04':\n                                acount.B04 =\n                                    obj[i].count\n                                break;\n                            case 'B05':\n                                acount.B05 =\n                                    obj[i].count\n                                break;\n                            case 'B06':\n                                acount.B06 =\n                                    obj[i].count\n                                break;\n                        }\n\n                    }\n                }\n            } else if (name == '#1主变B相') {\n                const obj = JSON.parse(self.ctx\n                    .data[i].data[0][1]);\n                if (obj.length == 0) {\n                    bcount = {\n                        B01: 0,\n                        B02: 0,\n                        B03: 0,\n                        B04: 0,\n                        B05: 0,\n                        B06: 0\n                    }\n                } else {\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        switch (obj[i].aiType) {\n                            case 'B01':\n                                bcount.B01 =\n                                    obj[i].count\n                                break;\n                            case 'B02':\n                                bcount.B02 =\n                                    obj[i].count\n                                break;\n                            case 'B03':\n                                bcount.B03 =\n                                    obj[i].count\n                                break;\n                            case 'B04':\n                                bcount.B04 =\n                                    obj[i].count\n                                break;\n                            case 'B05':\n                                bcount.B05 =\n                                    obj[i].count\n                                break;\n                            case 'B06':\n                                bcount.B06 =\n                                    obj[i].count\n                                break;\n                        }\n                    }\n                }\n\n            } else if (name == '#1主变C相') {\n                const obj = JSON.parse(self.ctx\n                    .data[i].data[0][1]);\n                if (obj.length == 0) {\n                    ccount = {\n                        B01: 0,\n                        B02: 0,\n                        B03: 0,\n                        B04: 0,\n                        B05: 0,\n                        B06: 0\n                    }\n                } else {\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        switch (obj[i].aiType) {\n                            case 'B01':\n                                ccount.B01 =\n                                    obj[i].count\n                                break;\n                            case 'B02':\n                                ccount.B02 =\n                                    obj[i].count\n                                break;\n                            case 'B03':\n                                ccount.B03 =\n                                    obj[i].count\n                                break;\n                            case 'B04':\n                                ccount.B04 =\n                                    obj[i].count\n                                break;\n                            case 'B05':\n                                ccount.B05 =\n                                    obj[i].count\n                                break;\n                            case 'B06':\n                                ccount.B06 =\n                                    obj[i].count\n                                break;\n                        }\n                    }\n                }\n            } else if (name == 'T041间隔') {\n                const obj = JSON.parse(self.ctx\n                    .data[i].data[0][1]);\n                if (obj.length == 0) {\n                    tcount = {\n                        B01: 0,\n                        B02: 0,\n                        B03: 0,\n                        B04: 0,\n                        B05: 0,\n                        B06: 0\n                    }\n                } else {\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        switch (obj[i].aiType) {\n                            case 'B01':\n                                tcount.B01 =\n                                    obj[i].count\n                                break;\n                            case 'B02':\n                                tcount.B02 =\n                                    obj[i].count\n                                break;\n                            case 'B03':\n                                tcount.B03 =\n                                    obj[i].count\n                                break;\n                            case 'B04':\n                                tcount.B04 =\n                                    obj[i].count\n                                break;\n                            case 'B05':\n                                tcount.B05 =\n                                    obj[i].count\n                                break;\n                            case 'B06':\n                                tcount.B06 =\n                                    obj[i].count\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        sumcount.B01 = acount.B01 + bcount.B01 +\n            ccount.B01 + tcount.B01\n        sumcount.B02 = acount.B02 + bcount.B02 +\n            ccount.B02 + tcount.B02\n        sumcount.B03 = acount.B03 + bcount.B03 +\n            ccount.B03 + tcount.B03\n        sumcount.B04 = acount.B04 + bcount.B04 +\n            ccount.B04 + tcount.B04\n        sumcount.B05 = acount.B05 + bcount.B05 +\n            ccount.B05 + tcount.B05\n        sumcount.B06 = acount.B06 + bcount.B06 +\n            ccount.B06 + tcount.B06\n    console.log('acount.B06',acount.B06,'bcount.B06',bcount.B06,'ccount.B06',ccount.B06,'tcount.B06',tcount.B06)\n        let PRPDvalueID = document\n            .getElementById('PRPDvalue')\n        PRPDvalueID.innerHTML = sumcount[aicount\n            .PRPDvalue]\n        let DCPvalueID = document\n            .getElementById('DCPvalue')\n        DCPvalueID.innerHTML = sumcount[aicount\n            .DCPvalue]\n        let Short_circuit_shock_currentvalueID =\n            document.getElementById(\n                'Short_circuit_shock_currentvalue'\n            )\n        Short_circuit_shock_currentvalueID\n            .innerHTML = sumcount[aicount\n                .Short_circuit_shock_currentvalue\n            ]\n        let Over_LoadvalueID = document\n            .getElementById('Over_Loadvalue')\n        Over_LoadvalueID.innerHTML = sumcount[\n            aicount.Over_Loadvalue]\n        let cooling_apparatusvalueID = document\n            .getElementById(\n                'cooling_apparatusvalue')\n        cooling_apparatusvalueID.innerHTML =\n            sumcount[aicount\n                .cooling_apparatusvalue]\n        let Loose_clampvalueID = document\n            .getElementById('Loose_clampvalue')\n        Loose_clampvalueID.innerHTML = sumcount[\n            aicount.Loose_clampvalue]\n        let Low_healthvalueID = document\n            .getElementById('Low_healthvalue')\n        Low_healthvalueID.innerHTML = 0\n\n    }, 10000)\n\n\n    self.onResize();\n}\n\n\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n    clearInterval(self.ctx.time)\n}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"事件统计V1.0\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903883,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d712db0-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_v1_023",
    "name" : "模型拟合度V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"container_bg\">\n    <div class=\"content\">\n        <div id=\"echart-voicetype\" style=\"width: 100%; height:100%; background-color: transparent;\">\n        </div>\n    </div>\n</div>\n    ",
      "templateCss" : ".container_bg {\n    background-image: url(\"/C5085/tbresource/images/fitting_bg.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n    width: 456px;\n    height: 312px;\n}\n\n.content {\n    background-color: transparent;\n    width: 428px;\n    height: 230px;\n    position: absolute;\n    margin-left: 14px;\n    margin-top: 59px;\n}",
      "controllerScript" : "const vocieType = {\n    'byq_jbfd': '局部放电',\n    'byq_zlpc': '直流偏磁',\n    'byq_dlcj': '短路冲击',\n    'byq_jjsd': '夹件松动',\n    'byq_zgz': '重过载',\n    'byq_lqqyx': '冷却器异响',\n    'byq_zgz_jbfd': '混合样本'\n}\n\nlet aicount = {\n    Loose_clampvalue: 'B01',\n    cooling_apparatusvalue: 'B02',\n    Over_Loadvalue: 'B03',\n    Short_circuit_shock_currentvalue: 'B04',\n    PRPDvalue: 'B05',\n    DCPvalue: 'B06'\n}\nlet count = {\n    B01: 1,\n    B02: 2,\n    B03: 0,\n    B04: 0,\n    B05: 0,\n    B06: 0\n}\nself.onInit = function() {\n    self.ctx.allTypeCount = {\n        'byq_jbfd': 5,\n        'byq_zlpc': 10,\n        'byq_dlcj': 5,\n        'byq_jjsd': 10,\n        'byq_zgz': 5,\n        'byq_lqqyx': 10,\n        'byq_zgz_jbfd': 5\n    }\n\n    var dom = document.getElementById(\n        'echart-voicetype');\n    var myChart = echarts.init(dom, null, {\n        renderer: 'svg'\n    });\n    var option;\n\n    option = {\n        xAxis: {\n            type: 'category',\n            data: ['夹件松动', '冷却器异响', '重过载',\n                '短路冲击', '局部放电', '直流偏磁'\n            ],\n            axisLabel: {\n                color: \"#fff\",\n                // rotate: 30,\n                fontSize: 8\n            },\n            axisTick: {\n                alignWithLabel: true\n            },\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    color: '#7CDCFF'\n                }\n            },\n        },\n\n        yAxis: {\n            type: 'value',\n            min: 0,\n            max: 100,\n            axisLabel: {\n                color: \"#C6D3EC\",\n                formatter: function(v, i) {\n                    return v + '%';\n                }\n            },\n            alignTicks: true,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    color: '#B2E7FF'\n                }\n            },\n        },\n        grid: {\n            bottom: '10%',\n            top: '5%',\n            left: '15%'\n        },\n        series: [{\n            data: [],\n            type: 'bar',\n            showBackground: true,\n            backgroundStyle: {\n                color: 'rgba(15, 73, 112, 0.2)'\n            },\n            itemStyle: {\n                // 设置每个柱子的颜色\n                color: {\n                    type: 'linear', // 使用线性渐变色\n                    x: 0,\n                    y: 0,\n                    x2: 0,\n                    y2: 1,\n                    colorStops: [{\n                        offset: 0,\n                        color: '#01FFD2' // 渐变起始色\n                    }, {\n                        offset: 1,\n                        color: '#03263C' // 渐变结束色\n                    }]\n                }\n            },\n            label: {\n                color: \"#ffffff\"\n            }\n        }]\n    };\n    myChart.setOption(option);\n    self.ctx.mychart = myChart;\n\n    self.onResize();\n}\n\n// const allType = ['byq_jbfd', 'byq_zlpc', 'byq_dlcj', 'byq_jjsd', 'byq_zgz', 'byq_lqqyx', 'byq_zgz_jbfd'];\nlet type = 0\nself.onDataUpdated = function() {\n    try {\n\n        var dataset = {\n            airesult: 0,\n            allType: [],\n            allProbs: [],\n        }\n        var allType = []\n        var allProbs = []\n        var curDev = localStorage.getItem(\n            'singleSensorCurDev')\n        var curCh = localStorage.getItem(\n            'singleSensorCurCh')\n        var option = self.ctx.mychart.getOption()\n        for (var i = 0; i < self.ctx.data.length; i++) {\n            var curData = self.ctx.data[i];\n            if (curData.datasource.name != curDev)\n                continue;\n            if (curData.dataKey.name === 'badresults') {\n                const obj = JSON.parse(curData.data[0][1]);\n\n                if (obj.length == 0) {\n                    // count = {\n                    //     B01: 0,\n                    //     B02: 0,\n                    //     B03: 0,\n                    //     B04: 0,\n                    //     B05: 0,\n                    //     B06: 0\n                    // }\n                } else {\n                    for (let i = 0; i < obj\n                        .length; i++) {\n                        switch (obj[i].name) {\n                            case 'B01':\n                                count.B01 =\n                                    obj[i].value\n                                break;\n                            case 'B02':\n                                count.B02 =\n                                    obj[i].value\n                                break;\n                            case 'B03':\n                                count.B03 =\n                                    obj[i].value\n                                break;\n                            case 'B04':\n                                count.B04 =\n                                    obj[i].value\n                                break;\n                            case 'B05':\n                                count.B05 =\n                                    obj[i].value\n                                break;\n                            case 'B06':\n                                count.B06 =\n                                    obj[i].value\n                                break;\n                        }\n\n                    }\n                }\n\n                // if (curData.data[0][1].includes('[')) {\n                //     var badresults = JSON.parse(curData\n                //         .data[0][1])\n                //     if (badresults.length != 0) {\n                //         badresults.forEach((item,\n                //             index) => {\n                //             allType.push(item.name)\n                //             allProbs.push(item\n                //                 .value * 100)\n                //         })\n                //         dataset.allType = allType\n                //         dataset.allProbs = allProbs\n                //     } else {\n                //         allType.length = 0\n                //         allProbs.length = 0\n                //     }\n                // }\n            }\n            // if (curData.dataKey.name === 'airesult') {\n            //     var airesult = curData.data[0][1];\n            //     dataset.airesult = curData.data[0][1];\n            // }\n            // if (curData.dataKey.name === 'aiprobability') {\n            //     var aiprobability = curData.data[0][1];\n            //     dataset.allProbs.push(aiprobability)\n            // }\n            if (curData.dataKey.name === 'type')\n            {\n                type = curData.data[0][1]\n            }\n\n            if (curData.dataKey.name === 'channelID') {\n\n                var ch = curData.data[0][1]\n                if (ch == curCh  && type == 1) {\n                    option.series[0].data = [count.B01 *\n                        100,\n                        count.B02 * 100, count.B03 *\n                        100, count\n                        .B04 * 100,\n                        count.B05 * 100, count.B06 *\n                        100\n                    ]\n            \n                    self.ctx.mychart.setOption(option)\n                } else {\n                    dataset.allType.length = 0\n                    dataset.allProbs.length = 0\n                }\n            }\n        }\n\n        // var option = self.ctx.mychart.getOption()\n        // if (dataset.airesult == 0) {\n        //     option.xAxis[0].data = ['正常']\n        //     option.series[0].data = dataset.allProbs\n        // } else {\n        //     option.xAxis[0].data = [allType, '正常']\n        //     dataset.allProbs[allProbs.length] = 0\n        //     option.series[0].data = dataset.allProbs\n        // }\n\n        // self.ctx.mychart.setOption(option)\n    } catch (e) {}\n}\n\nself.onResize = function() {\n    // self.ctx.mychart.resize({\n    //     width: self.ctx.width,\n    //     height: self.ctx.height,\n    // })\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"模型拟合度V1.0\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903908,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d74fe40-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "fft",
    "name" : "FFT",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/dsp.js"
      }, {
        "url" : "/C5085/tbresource/Echart.js"
      }, {
        "url" : "/C5085/tbresource/lightingchart.js"
      } ],
      "templateHtml" : "<div class=\"container_bg\">\n    <div class=\"content\">\n       <div id=\"pinpu\"  style=\"width: 100%; height:100%; background-color: transparent;\"></div>\n    </div>\n</div>",
      "templateCss" : ".container_bg {\n    background-image: url(\"/C5085/tbresource/images/spectrum.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    box-sizing: border-box;\n    position: relative;\n    width: 456px;\n    height: 312px;\n}\n\n.content {\n    background-color: transparent;\n    width: 428px;\n    height: 230px;\n    position: absolute;\n    margin-left: 14px;\n    margin-top: 59px;\n}",
      "controllerScript" : "var sampleRate = 64000;\nvar frameBufferLength = 2048;\nvar fft = null\nlet isFirstFalse = false;\nself.onInit = function() {\n    window.addEventListener('singleSensorSel', function(\n        event) {\n        isFirstFalse = true\n    })\n    fft = new FFT(frameBufferLength, sampleRate);\n\n    let signal = []\n    for (var i = 0; i < frameBufferLength; i++) {\n        var perV = i <= 1920 ? Math.random() + 8 : 0\n        signal.push(perV)\n    }\n\n    var chartDom = document.getElementById('pinpu');\n    var myChart = echarts.init(chartDom);\n    var option;\n\n    fft.forward(signal)\n\n    let spectrum = []\n    for (let i = 0; i < frameBufferLength / 2; i++) {\n        spectrum.push([i * 31.25, 20 * Math.log10(\n            fft\n            .spectrum[i])])\n    }\n    option = {\n        color: [\"#04CDF4\"],\n        xAxis: {\n\n            type: 'value',\n            max: 1024 * 31.25,\n            interval: 8000,\n            splitLine: {\n                show: false\n            },\n\n            axisLabel: {\n                formatter: '{value} Hz',\n                textStyle: {\n                    color: \"#65ABE7 \",\n                },\n\n                interval: '8000' // 自动计算最佳标签间隔/\n            },\n            lineStyle: {\n                color: \"#65C6E7 \",\n            },\n        },\n        yAxis: {\n            name: 'dB',\n            nameTextStyle: {\n                padding: [20, 0, -10, 0],\n            },\n            nameTextStyle: {\n                color: '#fff',\n            },\n            type: 'value',\n            splitLine: {\n                lineStyle: {\n                    color: \"#40486A \",\n                },\n            },\n            axisLabel: {\n                textStyle: {\n                    color: \"#65ABE7 \",\n                },\n            },\n        },\n        grid: {\n            left: \"3%\",\n            right: \"7%\",\n            top: \"12%\",\n            bottom: \"4%\",\n            containLabel: true,\n        },\n        series: [{\n            data: [],\n            type: 'line',\n            smooth: true,\n            symbol: 'none',\n\n        }]\n    };\n\n    option && myChart.setOption(option);\n    self.ctx.myChart = myChart;\n\n    self.onResize();\n}\n\nself.onDataUpdated = function() {\n    var myChart = self.ctx.myChart;\n    var curDev = localStorage.getItem(\n        'singleSensorCurDev')\n    var size = 0\n    let signal = []\n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var currentDeviceData = self.ctx.data[i]\n        if (currentDeviceData.datasource.name ===\n            curDev) {\n            var dataSet = currentDeviceData.data\n            for (var d = 0; d < dataSet.length; d++) {\n                var tsValuePair = dataSet[d];\n                var ts = tsValuePair[d]\n                if (tsValuePair[1] != '') {\n                    var value = JSON.parse(tsValuePair[\n                        1])\n                    size = value['size']\n                    var waveData = value['wave']\n                    for (var j = 0; j <\n                        frameBufferLength; j++) {\n                        var perValue = j < waveData\n                            .length ? waveData[j] : 0\n                        signal.push(perValue)\n                    }\n                }\n            }\n        }\n    }\n\n    if (size == 0) {\n        return\n    }\n\n    // let signal = []\n    // var randomInteger = Math.floor(Math.random() * 11);\n    // debugger;\n    // for (var i = 0; i < frameBufferLength; i++) {\n    //     var perV = i <= 1920 ? Math.random().toFixed(6) + randomInteger : 0\n    //     signal.push(perV)\n    // }\n\n    fft.forward(signal)\n    let spectrum = []\n    for (let i = 0; i < frameBufferLength / 2; i++) {\n        spectrum.push([i * 31.25, 20 * Math.log10(\n            fft\n            .spectrum[i])])\n    }\n\n    if (isFirstFalse === true) {\n        myChart.setOption({\n            series: [{\n                data: spectrum,\n                type: 'line',\n                smooth: true,\n                symbol: 'none',\n\n            }]\n        })\n    }\n\n}\n\nself.onResize = function() {\n    // self.ctx.myChart.resize({\n    //     width: self.ctx.width,\n    //     height: self.ctx.height,\n    // })\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"phaseAID\": {\n                \"title\": \"#1主变A相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"aa\"\n            },\n            \"phaseBID\": {\n                \"title\": \"#1主变B相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"bb\"\n            },\n            \"phaseCID\": {\n                \"title\": \"#1主变C相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"cc\"\n            },\n            \"phaseTID\": {\n                \"title\": \"T041间隔的设备id\",\n                \"type\": \"string\",\n                \"default\": \"tt\"\n            },\n            \"username\": {\n                \"title\": \"thingboard登录用户名\",\n                \"type\": \"string\",\n                \"default\": \"crysound@crysound.com\"\n            },\n            \"password\": {\n                \"title\": \"thingboard登录密码\",\n                \"type\": \"string\",\n                \"default\": \"crysound\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"phaseAID\",\n        \"phaseBID\",\n        \"phaseCID\",\n        \"phaseTID\",\n        \"username\",\n        \"password\"\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"FFT\"}"
    },
    "bundleAlias" : "_2",
    "createdTime" : 1710205903916,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7d7636c1-e00d-11ee-ac4e-4fa0f290f88e"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  } ],
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}