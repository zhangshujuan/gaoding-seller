{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "data_vision2",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "4c80b250-1acb-11ee-84c7-59378f85ce5f"
    },
    "image" : null,
    "name" : "data vision",
    "title" : "data vision"
  },
  "widgets" : [ {
    "alias" : "_2",
    "name" : "设备情况分析V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 9.5,
      "sizeY" : 9.5,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"box-device-status\">\n    <div class=\"title\">设备情况分析</div>\n    <div class=\"device-type\">\n        <ul>\n            <li>\n                <img src=\"/C5085/tbresource/images/product_shengxue.png\" alt=\"\">\n                <br/>\n                声学传感器\n                <br/>\n                <strong>12</strong> 台 \n            </li>\n            <li>\n                <img src=\"/C5085/tbresource/images/product_zhendong.png\" alt=\"\">\n                <br/>\n                振动传感器\n                <br/>\n                <strong>12</strong> 台 \n            </li>\n            <li>\n                <img src=\"/C5085/tbresource/images/product_guard.png\" alt=\"\">\n                <br/>\n                声像卫士\n                <br/> \n                <strong>3</strong> 台 \n            </li>\n        </ul>\n    </div>\n    <div id=\"list\" class=\"container\">\n      <div class=\"option option--one\" tabindex=\"0\">#1主变A相</div>\n      <div class=\"option option--two\" tabindex=\"0\">#1主变B相</div>\n      <div class=\"option option--three\" tabindex=\"0\">#1主变C相</div>\n      <div class=\"option option--four\" tabindex=\"0\">T041间隔</div>\n    </div>\n    <div id='device-status-bar' style=\"width: 100%; height: 60%\"></div>\n</div>",
      "templateCss" : "img{\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n}\n\n.box-device-status {\n    height: 100%;\n    min-height: 100px;\n    background-image: url(\"/C5085/tbresource/images/panel.png\");\n    background-repeat: no-repeat;\n    background-size: 100% 100%;\n    box-sizing: border-box;\n}\n\n.box-device-status .title {\n    font-weight: normal;\n    color: #fff;\n    background-image: url(\"/C5085/tbresource/images/title-bg-long.png\");\n    background-repeat: no-repeat;\n    background-size: 100% 100%;\n    padding-left: 25px;\n}\n\n.device-type ul li {\n    list-style: none;\n    display: inline-block;\n    width: 33%;\n    text-align: center;\n    /*background: url(\"/C5085/tbresource/images/icon_bg.jpg\") no-repeat;*/\n}\n\n.device-type li img {\n    width: 100px;\n    height: 100px;\n}\n\n.device-type li strong {\n    color: #9edf7f;\n    font-size: 20;\n}\n\n#device-status-bar {\n    margin-left: 20px;\n}\n\n/* @import url(\"https://fonts.googleapis.com/css?family=Roboto\"); */\n\n.container {\n  display: flex;\n  /* position: absolute; */\n  /* top: 50%;*/\n  /*left: 50%;*/\n  /*transform: translate(-50%, -50%);*/\n  /*-webkit-transform: translate(-50%, -50%);*/\n  /*-moz-transform: translate(-50%, -50%);*/\n  /*-ms-transform: translate(-50%, -50%);*/\n  /*-o-transform: translate(-50%, -50%); */\n  margin-top: 1em;\n  width: 100%;\n  height: 3em;\n  flex-flow: row wrap;\n  justify-content: center;\n}\n\n.option {\n  flex: 1 1 2em;\n  color: #f0f0f0;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  z-index: 2;\n  \n  white-space: nowrap;\n  \n  cursor: pointer;\n  border: none;\n  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  -webkit-transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  -moz-transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  -ms-transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  -o-transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n.option::before {\n  content: \"\";\n  position: relative;\n  width: 1.7em;\n  height: 100%;\n  left: 0%;\n  top: 0%;\n  color: #f0f0f0;\n  transform-origin: left top;\n  transform: skew(-30deg, 0deg);\n  -webkit-transform: skew(-30deg, 0deg);\n  -moz-transform: skew(-30deg, 0deg);\n  -ms-transform: skew(-30deg, 0deg);\n  -o-transform: skew(-30deg, 0deg);\n}\n.option--four {\n  background: #00b9ca;\n  box-shadow: 0px 0px 10px #00b9ca;\n}\n.option--four::before {\n  background: #00b9ca;\n}\n.option--three {\n  background: #1eb2ff;\n  box-shadow: 0px 0px 10px #1eb2ff;\n}\n.option--three::before {\n  background: #1eb2ff;\n}\n.option--two {\n  background: #3b7cff;\n  box-shadow: 0px 0px 10px #3b7cff;\n}\n.option--two::before {\n  background: #3b7cff;\n}\n.option--one {\n  background: #3c49c8;\n  box-shadow: 0px 0px 10px #3c49c8;\n}\n\n.option.device-status-active {\n  flex-basis: 5em;\n  outline: none;\n}\n\n.option--four.device-status-active {\n  box-shadow: 0px 0px 40px #00b9ca;\n}\n.option--three.device-status-active {\n  box-shadow: 0px 0px 40px #1eb2ff;\n}\n.option--two.device-status-active {\n  box-shadow: 0px 0px 40px #3b7cff;\n}\n.option--one.device-status-active {\n  box-shadow: 0px 0px 40px #3c49c8;\n}\n\n\n",
      "controllerScript" : "var allDeviceID = {\n    0: \"aa\", //#1主变A相\n    1: \"bb\", //#1主变B相\n    2: \"cc\", //#1主变C相\n    3: \"tt\" //T041间隔\n};\n\nself.onInit = function() {\n    // RPC函数,提供deviceID,获取设备状态\n    function getSysState(deviceID) {\n        var url =\n            '/C5085/api/plugins/rpc/twoway/' + deviceID;\n        var payload = {\n            method: 'GETSYSSTATE',\n            params: ''\n        };\n        var username = self.ctx.settings.username;\n        var password = self.ctx.settings.password;\n        var auth = 'Basic ' + btoa(username + ':' + password);\n        var jwtToken = localStorage.getItem('jwt_token');\n        var bearer = 'Bearer ' + jwtToken;\n        var headers = {\n            'Content-Type': 'application/json',\n            'Authorization': auth,\n            'X-Authorization': bearer\n        };\n        let sysdata = null;\n        $.ajax({\n            url: url,\n            type: 'POST',\n            headers: headers,\n            data: JSON.stringify(\n                payload),\n            success: function(\n            response) {\n                //console.log(response)\n                self.ctx.sysdata = JSON.parse(response.data)\n                //console.log(self.ctx.sysdata)\n            },\n            error: function(xhr, status,\n                error) {\n                console.error(xhr\n                    .responseText\n                    );\n            }\n        });\n    }\n    \n    //加载设置\n    allDeviceID[0] = self.ctx.settings.phaseAID;\n    allDeviceID[1] = self.ctx.settings.phaseBID;\n    allDeviceID[2] = self.ctx.settings.phaseCID;\n    allDeviceID[3] = self.ctx.settings.phaseTID;\n    console.log('allDeviceID', allDeviceID);\n    \n    // 默认C展开,默认接收C的状态\n    $(\".option--three\").addClass('device-status-active');\n    self.ctx.currentDeviceID = allDeviceID[2];\n    \n    // tab栏功能 0-A 1-B 2-C 3-GIS，点击tab后更新数据时向对应的设备发RPC\n    var listDom = document.getElementById(\"list\").children;\n    for (let i = 0; i < listDom.length; i++) {\n        listDom[i].onclick = function () {\n            let activeEles = document.querySelectorAll(\".device-status-active\");\n            activeEles.forEach((ele) => {\n                ele.classList.remove(\"device-status-active\");\n            })\n            listDom[i].classList.add(\"device-status-active\");\n            self.ctx.currentDeviceID = allDeviceID[i];\n        }\n    }\n    \n    // 横向直方图初始化\n    self.ctx.deviceStatusData = [];\n    var dom = document.getElementById(\n        'device-status-bar');\n    var myChart = echarts.init(dom, null, {\n        renderer: 'svg',\n        useDirtyRect: false\n    });\n    var option;\n    const data = [0, 0, 0];\n    option = {\n        xAxis: {\n            max: 'dataMax',\n            splitLine: {\n                show: false\n            },\n            axisLabel: {\n                show: false\n            },\n            axisTick: {\n                show: false\n            },\n            axisLine: {\n                show: false\n            }\n        },\n        yAxis: {\n            type: 'category',\n            data: ['CPU', '内存', '硬盘'],\n            inverse: true,\n            animationDuration: 300,\n            animationDurationUpdate: 300,\n            max: 2, // only the largest 3 bars will be displayed\n            axisLabel: {\n                rotate: 90,\n                color: \"#ffffff\"\n            }\n        },\n        series: [{\n            realtimeSort: true,\n            name: 'X',\n            type: 'bar',\n            data: data,\n            label: {\n                show: true,\n                position: 'right',\n                valueAnimation: true,\n                formatter: '{c}%',\n                color: \"#ffffff\"\n            },\n            itemStyle: {\n                normal: {\n                    color: function(param) {\n                        var colorList = [\n                            '#0b69e6',\n                            '#5ad8a6',\n                            '#34d2ff'\n                        ]\n                        return colorList[\n                            param\n                            .dataIndex\n                        ]\n                    }\n                }\n            }\n        }],\n        animationDuration: 0,\n        animationDurationUpdate: 1000,\n        animationEasing: 'linear',\n        animationEasingUpdate: 'linear'\n    };\n\n    // TODO: 下发RPC, 通过self.ctx.sysdata更新直方图的数据\n    function run() {\n        //console.log(self.ctx.sysdata);\n        getSysState(self.ctx.currentDeviceID);\n        if (self.ctx.sysdata) {\n            const cpu = parseInt(self.ctx.sysdata.cpu);\n            const mem = parseInt(self.ctx.sysdata.memory);\n            const dis = parseInt(self.ctx.sysdata.disk[0].value);\n            let data = new Array(cpu, mem, dis);\n            //console.log(data);\n            myChart.setOption({\n            series: [{\n                type: 'bar',\n                data\n                }]\n            });\n        }\n    }\n    setTimeout(function() {\n        run();\n    }, 0);\n    setInterval(function() {\n        run();\n    }, 10000);\n\n    if (option && typeof option === 'object') {\n        myChart.setOption(option);\n        self.ctx.mychart = myChart;\n    }\n    \n}\n\n\nself.onResize = function() {\n    self.ctx.mychart.resize({\n        width: self.ctx.width,\n        height: self.ctx.height * 0.6,\n    })\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"phaseAID\": {\n                \"title\": \"#1主变A相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"aa\"\n            },\n            \"phaseBID\": {\n                \"title\": \"#1主变B相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"bb\"\n            },\n            \"phaseCID\": {\n                \"title\": \"#1主变C相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"cc\"\n            },\n            \"phaseTID\": {\n                \"title\": \"T041间隔的设备id\",\n                \"type\": \"string\",\n                \"default\": \"tt\"\n            },\n            \"username\": {\n                \"title\": \"thingboard登录用户名\",\n                \"type\": \"string\",\n                \"default\": \"crysound@crysound.com\"\n            },\n            \"password\": {\n                \"title\": \"thingboard登录密码\",\n                \"type\": \"string\",\n                \"default\": \"crysound\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"phaseAID\",\n        \"phaseBID\",\n        \"phaseCID\",\n        \"phaseTID\",\n        \"username\",\n        \"password\"\n\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"设备情况分析V1.0\"}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095948,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c8434c0-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_3",
    "name" : "变压器模型",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/three.js"
      }, {
        "url" : "/C5085/tbresource/three.js-master/examples/js/controls/OrbitControls.js"
      }, {
        "url" : "/C5085/tbresource/three.js-master/examples/js/loaders/FBXLoader.js"
      }, {
        "url" : "/C5085/tbresource/inflate.min.js"
      }, {
        "url" : "/C5085/tbresource/three.js-master/examples/js/loaders/STLLoader.js"
      } ],
      "templateHtml" : "<div id=\"transformer-model\"\n    style=\"width: 100%; height: 100%\"></div>\n",
      "templateCss" : "",
      "controllerScript" : "self.onInit = function() {\n    /**\n     * 创建场景对象Scene\n     */\n    var scene = new THREE.Scene();\n    /**\n     * 导入fbx对象\n     */\n    var fbxLoader = new THREE.FBXLoader();\n    console.log(fbxLoader)\n    fbxLoader.load('/C5085/tbresource/Power_Transformer2013.fbx', fbx => {\n        console.log('fbx',fbx)\n        fbx.scale.set(1,1,1)\n        scene.add(fbx)\n    })\n    \n    /**\n     * 光源设置\n     */\n    //点光源\n    var point = new THREE.PointLight(0xffffff, 0.3);\n    point.position.set(400, 200, 300); //点光源位置\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    var ambient = new THREE.AmbientLight(0xffffff, 0.8);\n    scene.add(ambient);\n \n    /**\n     * 相机设置\n     */\n    var width = document.getElementById('transformer-model').clientWidth; //窗口宽度\n    var height = document.getElementById('transformer-model').clientHeight; //窗口高度\n    var k = width / height; //窗口宽高比\n    var s = 300; //三维场景显示范围控制系数，系数越大，显示的范围越大\n    //创建相机对象\n    var camera = new THREE.OrthographicCamera(-s * k,\n        s * k, s, -s, 1, 1000);\n    camera.position.set(200, 300, 200); //设置相机位置\n    camera.lookAt(scene.position); //设置相机方向(指向的场景对象)\n    /**\n     * 创建渲染器对象\n     */\n    var renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n    });\n    renderer.setSize(width, height); //设置渲染区域尺寸\n    renderer.setClearColor(0xffffff,0); //设置背景颜色\n    renderer.setClearAlpha(0);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    var element = document.querySelector('#transformer-model');\n    element.appendChild(renderer\n    .domElement); //body元素中插入canvas对象\n    //执行渲染操作   指定场景、相机作为参数\n    let num = new Date().getTime();\n    let time = 0;\n    let LoopId = null;\n    function animationLoop() {\n      time = new Date().getTime() - num;\n      renderer.render(scene, camera);\n      console.log(time);\n      if (time > 1000) {\n        cancelAnimationFrame(LoopId);\n      } else {\n        LoopId = requestAnimationFrame(animationLoop);\n      }\n    }\n    function render() {\n        renderer.render(scene, camera); //执行渲染操作\n    }\n    animationLoop();\n    var controls = new THREE.OrbitControls(camera,\n        renderer.domElement); //创建控件对象\n    controls.addEventListener('change',\n    render); //监听鼠标、键盘事件\n\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"变压器模型\",\"dropShadow\":true}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095958,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c85bb60-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_4",
    "name" : "设备运维统计静态图V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"box-device-fix\">\n    <div class=\"title\">设备运维统计</div>\n    <div class=\"container\">\n        <div id=\"device-fix-pie\" style=\"width:100%;height: 80%\"></div>\n        <div id=\"device-fix-bar\" style=\"width:0; height: 80%\"></div>\n    </div>\n</div>",
      "templateCss" : ".box-device-fix {\n    height:100%;\n\tmin-height:100px;\n\tbackground-image:url(\"/C5085/tbresource/images/panel.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tbox-sizing:border-box;\n}\n\n.box-device-fix .title {\n    font-weight:normal;\n\tcolor:#fff;\n\tbackground-image:url(\"/C5085/tbresource/images/title-bg-long.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tpadding-left: 25px;\n}\n\n.box-device-fix .container {\n    display: flex;\n    width: 100%;\n    height: 100%;\n}",
      "controllerScript" : "self.onInit = function() {\n    // bar\n    var dom = document.getElementById(\n        'device-fix-bar');\n    var barChart = echarts.init(dom, null, {\n        renderer: 'canvas',\n        useDirtyRect: false\n    });\n    var app = {};\n\n    var option;\n\n    option = {\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'shadow'\n            }\n        },\n        legend: {textStyle: {\n            color: '#fff'\n        }},\n        grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n        },\n        xAxis: [{\n            type: 'category',\n            data: ['五月份', '六月份', '七月份',\n                '八月份', '九月份', '十月份'\n            ],\n            axisLabel: {\n                color: '#fff'\n            }\n        }],\n        yAxis: [{\n            type: 'value',\n            axisLabel: {\n                color: '#fff'\n            }\n        }],\n        series: [{\n                name: '#1主变A相',\n                type: 'bar',\n                emphasis: {\n                    focus: 'series'\n                },\n                itemStyle: {\n                  color: '#3c49c8'  \n                },\n                data: [320, 332, 301, 334, 390,\n                    330\n                ]\n            },\n            {\n                name: '#1主变B相',\n                type: 'bar',\n                emphasis: {\n                    focus: 'series'\n                },\n                itemStyle: {\n                  color: '#3b7cff'  \n                },\n                data: [120, 132, 101, 134, 90,\n                    230\n                ]\n            },\n            {\n                name: '#1主变C相',\n                type: 'bar',\n                emphasis: {\n                    focus: 'series'\n                },\n                itemStyle: {\n                  color: '#1eb2ff'  \n                },\n                data: [220, 182, 191, 234, 290,\n                    330\n                ]\n            },\n            {\n                name: 'T041间隔',\n                type: 'bar',\n                emphasis: {\n                    focus: 'series'\n                },\n                itemStyle: {\n                  color: '#00b9ca'  \n                },\n                data: [150, 232, 201, 154, 190,\n                    330\n                ]\n            },\n\n        ]\n    };\n\n    if (option && typeof option === 'object') {\n        barChart.setOption(option);\n        self.ctx.barChart = barChart;\n    }\n\n    // pie\n    dom = document.getElementById(\n        'device-fix-pie');\n    var pieChart = echarts.init(dom, null, {\n        renderer: 'svg',\n        useDirtyRect: false\n    });\n    app = {};\n\n    option = {\n        tooltip: {\n            trigger: 'item'\n        },\n        legend: {\n            top: '5%',\n            orient: 'vertical',\n            left: 'left',\n            textStyle: {\n                color: '#fff'\n            }\n        },\n        color: ['#7ed3f4', '#40b27d', '#ff915a'],\n        series: {\n            name: '故障设备',\n            type: 'pie',\n            radius: ['40%', '70%'],\n            avoidLabelOverlap: false,\n            label: {\n                show: true,\n                position: 'center',\n                formatter: () => {\n                    return \"故障设备\" +\n                        \"\\n\" + \"0台\"\n                },\n                \n                fontWeight: 'bold'\n            },\n            itemStyle: {\n              // 设置每个柱子的颜色\n              color: function(params) {\n                var colorList = ['#5d7092','#5ad8a6','#0b69e9','#E87C25'];\n                return colorList[params.dataIndex];\n              }\n            },\n            labelLine: {\n                show: true\n            },\n            data: [{\n                    value: 0,\n                    name: '内存已满'\n                },\n                {\n                    value: 0,\n                    name: 'CPU损坏'\n                },\n                {\n                    value: 0,\n                    name: '软件闪退'\n                }\n            ]\n        }\n    };\n\n    if (option && typeof option === 'object') {\n        pieChart.setOption(option);\n        self.ctx.pieChart = pieChart;\n    }\n}\n\nself.onResize = function() {\n    // self.ctx.barChart.resize({\n    //     width: self.ctx.width * 0.6,\n    //     height: self.ctx.height * 0.95,\n    // });\n    self.ctx.pieChart.resize({\n        width: self.ctx.width,\n        height: self.ctx.height,\n    })\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"设备运维统计静态图V1.0\",\"dropShadow\":true}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095964,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c86a5c0-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_6",
    "name" : "设备通道报警指示",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"reset-alarm\">清除报警</div>\r\n<ul id=\"accordion\" class=\"accordion\">\r\n\t\t<li class=\"default open\">\r\n\t\t   \r\n\t\t\t<div class=\"link phase-a\"><i ></i>#1主变A相<i class=\"fa fa-chevron-down\"></i></div>\r\n\t\t\t<ul class=\"submenu phase-a\">\r\n\t\t\t\t<li class=\"ch0\"><a >非接触监测点1</a></li>\r\n\t\t\t\t<li class=\"ch1\"><a >接触式监测点1</a></li>\r\n\t\t\t\t<li class=\"ch2\"><a >非接触监测点2</a></li>\r\n\t\t\t\t<li class=\"ch3\"><a >接触式监测点2</a></li>\r\n\t\t\t\t<li class=\"ch4\"><a >非接触监测点3</a></li>\r\n\t\t\t\t<li class=\"ch5\"><a >接触式监测点3</a></li>\r\n\t\t\t\t<li class=\"ch6\"><a >非接触监测点4</a></li>\r\n\t\t\t\t<li class=\"ch7\"><a >接触式监测点4</a></li>\r\n\t\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t<div class=\"link phase-b\"><i ></i>#1主变B相<i class=\"fa fa-chevron-down\"></i></div>\r\n\t\t\t<ul class=\"submenu phase-b\">\r\n\t\t\t\t<li class=\"ch0\"><a >非接触监测点1</a></li>\r\n\t\t\t\t<li class=\"ch1\"><a >接触式监测点1</a></li>\r\n\t\t\t\t<li class=\"ch2\"><a >非接触监测点2</a></li>\r\n\t\t\t\t<li class=\"ch3\"><a >接触式监测点2</a></li>\r\n\t\t\t\t<li class=\"ch4\"><a >非接触监测点3</a></li>\r\n\t\t\t\t<li class=\"ch5\"><a >接触式监测点3</a></li>\r\n\t\t\t\t<li class=\"ch6\"><a >非接触监测点4</a></li>\r\n\t\t\t\t<li class=\"ch7\"><a >接触式监测点4</a></li>\r\n\t\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t<div class=\"link phase-c\"><i ></i>#1主变C相<i class=\"fa fa-chevron-down\"></i></div>\r\n\t\t\t<ul class=\"submenu phase-c\">\r\n\t\t\t\t<li class=\"ch0\"><a >非接触监测点1</a></li>\r\n\t\t\t\t<li class=\"ch1\"><a >接触式监测点1</a></li>\r\n\t\t\t\t<li class=\"ch2\"><a >非接触监测点2</a></li>\r\n\t\t\t\t<li class=\"ch3\"><a >接触式监测点2</a></li>\r\n\t\t\t\t<li class=\"ch4\"><a >非接触监测点3</a></li>\r\n\t\t\t\t<li class=\"ch5\"><a >接触式监测点3</a></li>\r\n\t\t\t\t<li class=\"ch6\"><a >非接触监测点4</a></li>\r\n\t\t\t\t<li class=\"ch7\"><a >接触式监测点4</a></li>\r\n\t\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t<div class=\"link phase-t\"><i ></i>T041间隔<i class=\"fa fa-chevron-down\"></i></div>\r\n\t\t\t<ul class=\"submenu phase-t\">\r\n\t\t\t\t<li class=\"ch0\"><a >通道1</a></li>\r\n\t\t\t\t<li class=\"ch1\"><a >通道2</a></li>\r\n\t\t\t\t<li class=\"ch2\"><a >通道3</a></li>\r\n\t\t\t\t<li class=\"ch3\"><a >通道4</a></li>\r\n\t\t\t\t<li class=\"ch4\"><a >通道5</a></li>\r\n\t\t\t\t<li class=\"ch5\"><a >通道6</a></li>\r\n\t\t\t\t<li class=\"ch6\"><a >通道7</a></li>\r\n\t\t\t\t<li class=\"ch7\"><a >通道8</a></li>\r\n\t\t\t\t<li class=\"ch8\"><a >通道9</a></li>\r\n\t\t\t\t<li class=\"ch9\"><a >通道10</a></li>\r\n\t\t\t\t<li class=\"ch10\"><a >通道11</a></li>\r\n\t\t\t\t<li class=\"ch11\"><a >通道12</a></li>\r\n\t\t\t\t<li class=\"ch12\"><a >通道13</a></li>\r\n\t\t\t\t<li class=\"ch13\"><a >通道14</a></li>\r\n\t\t\t\t<li class=\"ch14\"><a >通道15</a></li>\r\n\t\t\t\t<li class=\"ch15\"><a >通道16</a></li>\r\n\t\t\t</ul>\r\n\t\t</li>\r\n\t</ul>",
      "templateCss" : "ul {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    -webkit-box-sizing: border-box;\r\n    -moz-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n\r\n/** =======================\r\n * Contenedor Principal\r\n ===========================*/\r\n.accordion {\r\n    width: 100%;\r\n    max-width: 180px;\r\n    margin: 0px auto 20px;\r\n    background: #099ad4;\r\n    -webkit-border-radius: 4px;\r\n    -moz-border-radius: 4px;\r\n    border-radius: 4px;\r\n}\r\n\r\n.accordion .link {\r\n    cursor: pointer;\r\n    display: block;\r\n    padding: 15px 15px 15px 42px;\r\n    color: #fff;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    border-bottom: 1px solid #CCC;\r\n    position: relative;\r\n    -webkit-transition: all 0.4s ease;\r\n    -o-transition: all 0.4s ease;\r\n    transition: all 0.4s ease;\r\n}\r\n\r\n.reset-alarm {\r\n    width: 100%;\r\n    max-width: 180px;\r\n    margin: 30px auto 0;\r\n    border-radius: 10px;\r\n    \r\n    cursor: pointer;\r\n    display: block;\r\n    padding: 15px 15px 15px 42px;\r\n    color: #606361;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    background-color: #5ad8a6;\r\n    transition: .2s;\r\n    transform: scale(1);\r\n}\r\n\r\n.reset-alarm:active {\r\n    transform: scale(0.95);\r\n}\r\n\r\n.accordion .link.alarm {\r\n    background-color: #af1c1c;\r\n}\r\n\r\n.accordion li:last-child .link {\r\n    border-bottom: 0;\r\n}\r\n\r\n.accordion li i {\r\n    position: absolute;\r\n    top: 16px;\r\n    left: 12px;\r\n    font-size: 18px;\r\n    color: #595959;\r\n    -webkit-transition: all 0.4s ease;\r\n    -o-transition: all 0.4s ease;\r\n    transition: all 0.4s ease;\r\n}\r\n\r\n.accordion li i.fa-chevron-down {\r\n    right: 12px;\r\n    left: auto;\r\n    font-size: 16px;\r\n}\r\n\r\n.accordion li.open i.fa-chevron-down {\r\n    -webkit-transform: rotate(180deg);\r\n    -ms-transform: rotate(180deg);\r\n    -o-transform: rotate(180deg);\r\n    transform: rotate(180deg);\r\n}\r\n\r\n.accordion li.default .submenu {\r\n    display: block;\r\n}\r\n\r\n/**\r\n * Submenu\r\n -----------------------------*/\r\n.submenu {\r\n    display: none;\r\n    background: #444359;\r\n    font-size: 14px;\r\n\r\n    max-height: 150px;\r\n    overflow: auto;\r\n    scrollbar-width: none;\r\n}\r\n\r\n.submenu::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.submenu li {\r\n    border-bottom: 1px solid #4b4a5e;\r\n}\r\n\r\n.submenu .alarm {\r\n    background-color: #af1c1c;\r\n}\r\n\r\n.submenu a {\r\n    display: block;\r\n    text-decoration: none;\r\n    color: #d9d9d9;\r\n    padding: 12px;\r\n    padding-left: 42px;\r\n    -webkit-transition: all 0.25s ease;\r\n    -o-transition: all 0.25s ease;\r\n    transition: all 0.25s ease;\r\n}\r\n\r\n.submenu a:hover {\r\n    background: #686061;\r\n    color: #FFF;\r\n}",
      "controllerScript" : "self.onInit = function() {\n    var Accordion = function(el, multiple) {\n        this.el = el || {};\n        this.multiple = multiple || false;\n        var links = this.el.find('.link');\n        links.on('click', {\n            el: this.el,\n            multiple: this.multiple\n        }, this.dropdown);\n    };\n    Accordion.prototype.dropdown = function(e) {\n        var $el = e.data.el;\n        $this = $(this), $next = $this.next();\n        $next.slideToggle();\n        $this.parent().toggleClass('open');\n        if (!e.data.multiple) {\n            $el.find('.submenu').not($next)\n                .slideUp().parent().removeClass(\n                    'open');\n        }\n    };\n    var accordion = new Accordion($('#accordion'),\n        false);\n\n    // $(\".link.phase-t\").addClass('alarm');\n    // var num = 4\n    // var chClass = '.ch' + num.toString()\n    // $(`.submenu.phase-t ${chClass}`).addClass('alarm');\n\n    $('.reset-alarm').click(function() {\n        $('.alarm').removeClass('alarm');\n    });\n}\n\nself.onDataUpdated = function() {\n    // airesult、chID的顺序传的\n    let allAlarmDev = {\n        '#1主变A相': {\n            result: -1,\n            ch: -1\n        },\n        '#1主变B相': {\n            result: -1,\n            ch: -1\n        },\n        '#1主变C相': {\n            result: -1,\n            ch: -1\n        },\n        'T041间隔': {\n            result: -1,\n            ch: -1\n        }\n    }\n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var curData = self.ctx.data[i];\n        \n        if (curData.dataKey.name === 'airesult' && curData.data[0][1] === 1) {\n            console.log('curData',curData);\n            console.log('curData.data1', curData.data)\n             console.log('curData2', curData)\n            console.log('curData.data[0][1]', curData.data[0][1])\n            console.log('curData.datasource.name',curData.datasource.name);\n            allAlarmDev[curData.datasource.name].result = 1;\n        }\n        if (curData.dataKey.name === \"channelID\") {\n            allAlarmDev[curData.datasource.name].ch = curData.data[0][1];\n        }\n    }\n    //console.log('allAlarmDev', allAlarmDev)\n    // A相告警:\n    if (allAlarmDev['#1主变A相'].result == 1 && allAlarmDev['#1主变A相'].ch != -1) {\n        console.log('self.ctx.data', self.ctx.data);\n        console.log('allAlarmDev', allAlarmDev)\n        $(\".link.phase-a\").addClass('alarm');\n        let chClass = '.ch' + allAlarmDev['#1主变A相'].ch.toString();\n        $(`.submenu.phase-a ${chClass}`).addClass('alarm');\n    }\n    // B相告警:\n    if (allAlarmDev['#1主变B相'].result == 1 && allAlarmDev['#1主变B相'].ch != -1) {\n        $(\".link.phase-b\").addClass('alarm');\n        let chClass = '.ch' + allAlarmDev['#1主变B相'].ch.toString();\n        $(`.submenu.phase-b ${chClass}`).addClass('alarm');\n    }\n    // C相告警:\n    if (allAlarmDev['#1主变C相'].result == 1 && allAlarmDev['#1主变C相'].ch != -1) {\n        $(\".link.phase-c\").addClass('alarm');\n        let chClass = '.ch' + allAlarmDev['#1主变C相'].ch.toString();\n        $(`.submenu.phase-c ${chClass}`).addClass('alarm');\n    }\n    // T相告警:\n    if (allAlarmDev['T041间隔'].result == 1 && allAlarmDev['T041间隔'].ch != -1) {\n        $(\".link.phase-t\").addClass('alarm');\n        let chClass = '.ch' + allAlarmDev['T041间隔'].ch.toString();\n        $(`.submenu.phase-t ${chClass}`).addClass('alarm');\n    }\n    \n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"设备通道报警指示\"}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095955,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c854630-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_8",
    "name" : "设备数量",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div style=\"text-align:center;\" class=\"title\">\n  <h4>泰州站</h4>\n</div>\n\n<div class=\"subtitle\">\n   传感器总数\n</div>\n<div class=\"content\">\n   40\n</div>\n<div class=\"subtitle\">\n   监测点在线数\n</div>\n<div class=\"content online-count\">\n   0\n</div>\n<div class=\"subtitle\">\n   接触式传感器总数\n</div>\n<div class=\"content\">\n   20\n</div>\n<div class=\"subtitle\">\n    非接触式传感器总数\n</div>\n<div class=\"content\">\n   20\n</div>\n<div class=\"subtitle\">\n   声像卫士总数\n</div>\n<div class=\"content\">\n   3\n</div>",
      "templateCss" : "\n\ndiv {\n  \n  margin-top: 10px;\n  color: white;\n  letter-spacing: 2px;\n  font-size: 15px;\n}\n.title\n{\n    width: 100%;\n    font-size: 25px;\n    font-weight: bold;\n      color: #34d2ff;\n}\n.content\n{\n    width: 100%;\n    font-size: 25px;\n    color: #34d2ff;\n    text-shadow: 0 0 5px  rgb(154, 160, 255);\n      letter-spacing: 0px;\n      text-align:center;\n}\n\n.subtitle {\n    width: 100%;\n    text-align: center;\n}",
      "controllerScript" : "const allDeviceID = {\n    '#1主变A相': \"7aaabdb0-1549-11ee-a421-394507dab0d7\", //#1主变A相\n    '#1主变B相': \"bb\", //#1主变B相\n    '#1主变C相': \"cc\", //#1主变C相\n    'T041间隔': \"tt\" //T041间隔\n};\n\nself.onInit = function() {\n    \n    allDeviceID['#1主变A相'] = self.ctx.settings.phaseAID;\n    allDeviceID['#1主变B相'] = self.ctx.settings.phaseBID;\n    allDeviceID['#1主变C相'] = self.ctx.settings.phaseCID;\n    allDeviceID['T041间隔'] = self.ctx.settings.phaseTID;\n    \n    // RPC函数\n    function getDevInfo(deviceID) {\n        var url =\n            '/C5085/api/plugins/rpc/twoway/' + deviceID;\n        var payload = {\n            method: 'GETDEVINFO',\n            params: ''\n        };\n        var username = self.ctx.settings.username;\n        var password = self.ctx.settings.password;\n        var auth = 'Basic ' + btoa(username + ':' + password);\n        var jwtToken = localStorage.getItem('jwt_token');\n        var bearer = 'Bearer ' + jwtToken;\n        var headers = {\n            'Content-Type': 'application/json',\n            'Authorization': auth,\n            'X-Authorization': bearer\n        };\n        let sysdata = null;\n        $.ajax({\n            url: url,\n            type: 'POST',\n            headers: headers,\n            data: JSON.stringify(\n                payload),\n            success: function(\n            response) {\n                console.log(response)\n                const devInfo = JSON.parse(response.data)\n                //console.log('devInfo', devInfo)\n                for (var i = 0; i < devInfo.length; i++) {\n                    if (devInfo[i].enable == true) {\n                        self.ctx.onlineCount += 1;\n                    }\n                }\n            },\n            error: function(xhr, status,\n                error) {\n                console.error(xhr\n                    .responseText\n                    );\n            }\n        });\n    }\n    \n   self.ctx.needRPC = true;\n   self.ctx.onlineCount = 0;\n   setInterval(function () {\n       self.ctx.onlineCount = 0;\n       getDevInfo(allDeviceID['#1主变A相']);\n       getDevInfo(allDeviceID['#1主变B相']);\n       getDevInfo(allDeviceID['#1主变C相']);\n       getDevInfo(allDeviceID['T041间隔']);\n   }, 10000);\n   \n   \n   setInterval(function () {\n       $('.online-count').text(self.ctx.onlineCount.toString());\n   }, 500);\n   \n   \n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"phaseAID\": {\n                \"title\": \"#1主变A相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"aa\"\n            },\n            \"phaseBID\": {\n                \"title\": \"#1主变B相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"bb\"\n            },\n            \"phaseCID\": {\n                \"title\": \"#1主变C相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"cc\"\n            },\n            \"phaseTID\": {\n                \"title\": \"T041间隔的设备id\",\n                \"type\": \"string\",\n                \"default\": \"tt\"\n            },\n            \"username\": {\n                \"title\": \"thingboard登录用户名\",\n                \"type\": \"string\",\n                \"default\": \"crysound@crysound.com\"\n            },\n            \"password\": {\n                \"title\": \"thingboard登录密码\",\n                \"type\": \"string\",\n                \"default\": \"crysound\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"phaseAID\",\n        \"phaseBID\",\n        \"phaseCID\",\n        \"phaseTID\",\n        \"username\",\n        \"password\"\n\n    ]\n}",
      "dataKeySettingsSchema" : "{}",
      "settingsDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"设备数量\",\"dropShadow\":true}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095952,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c84d100-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_v1_0",
    "name" : "波形图V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 9,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      }, {
        "url" : "/C5085/tbresource/simpleSelect/jquery.nice-select.min.js"
      }, {
        "url" : "/C5085/tbresource/simpleSelect/nice-select.css"
      } ],
      "templateHtml" : "<div class=\"box-pinpu\">\n    <div class=\"title\">波形图</div>\n\n    <div class=\"selectbox\">\n        <select id=\"select-device\">\n            <option value=\"#1主变A相\">#1主变A相</option>\n            <option value=\"#1主变B相\">#1主变B相</option>\n            <option value=\"#1主变C相\" selected>#1主变C相</option>\n            <option value=\"T041间隔\">T041间隔</option>\n        </select>\n        <select id=\"select-channel\">\n            <option value=\"0\">非接触监测点1</option>\n            <option value=\"1\">接触式监测点1</option>\n            <option value=\"2\">非接触监测点2</option>\n            <option value=\"3\">接触式监测点2</option>\n            <option value=\"4\">非接触监测点3</option>\n            <option value=\"5\">接触式监测点3</option>\n            <option value=\"6\">非接触监测点4</option>\n            <option value=\"7\">接触式监测点4</option>\n        </select>\n    </div>\n\n\n    <div id=\"echart-boxing\" style=\"width: 100%; height:80%\">\n    </div>\n\n</div>",
      "templateCss" : ".box-pinpu {\n    height:100%;\n\tmin-height:100px;\n\tbackground-image:url(\"/C5085/tbresource/images/panel.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tbox-sizing:border-box;\n}\n\n.box-pinpu .title {\n    font-weight:normal;\n\tcolor:#fff;\n\tbackground-image:url(\"/C5085/tbresource/images/title-bg.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tpadding-left: 25px;\n}\n\n.selectbox {\n    display: flex;\n    margin-left: 0.7em;\n    margin-top: 0.7em;\n    height: 20%;\n}\n\n.nice-select .list {\n  max-height: 150px; /* 指定最大高度 */\n  overflow-y: auto; /* 显示纵向滚动条 */\n}",
      "controllerScript" : "var allDeviceID = {\n    '#1主变A相': \"aa\", //#1主变A相\n    '#1主变B相': \"bb\", //#1主变B相\n    '#1主变C相': \"cc\", //#1主变C相\n    'T041间隔': \"tt\" //T041间隔\n};\nconst methodStop = 'WAVSTOP';\nconst methodStart = 'WAVSTART';\n\nself.onInit = function() {\n    // 加载niceSelect\n    $('select').niceSelect();\n    \n    //加载设置\n    allDeviceID['#1主变A相'] = self.ctx.settings.phaseAID;\n    allDeviceID['#1主变B相'] = self.ctx.settings.phaseBID;\n    allDeviceID['#1主变C相'] = self.ctx.settings.phaseCID;\n    allDeviceID['T041间隔'] = self.ctx.settings.phaseTID;\n    console.log('allDeviceID', allDeviceID);\n    \n    // 选择框dom\n    const selDevice = document.querySelector(\n        '#select-device');\n    const selChannel = document.querySelector(\n        '#select-channel');\n        \n    // 设备选择框绑定事件\n    $('#select-device').on('change', function() {\n        if (selDevice.value === '#1主变A相' ||\n            selDevice.value === '#1主变B相' ||\n            selDevice.value === '#1主变C相') {\n            selChannel.innerHTML = `\n                <option value=\"0\">非接触监测点1</option>\n                <option value=\"1\">接触式监测点1</option>\n                <option value=\"2\">非接触监测点2</option>\n                <option value=\"3\">接触式监测点2</option>\n                <option value=\"4\">非接触监测点3</option>\n                <option value=\"5\">接触式监测点3</option>\n                <option value=\"6\">非接触监测点4</option>\n                <option value=\"7\">接触式监测点4</option>\n            `;\n        } else if (selDevice.value ===\n            'T041间隔') {\n            selChannel.innerHTML = `\n                <option value=\"0\">通道1</option>\n                <option value=\"1\">通道2</option>\n                <option value=\"2\">通道3</option>\n                <option value=\"3\">通道4</option>\n                <option value=\"4\">通道5</option>\n                <option value=\"5\">通道6</option>\n                <option value=\"6\">通道7</option>\n                <option value=\"7\">通道8</option>\n                <option value=\"8\">通道9</option>\n                <option value=\"9\">通道10</option>\n                <option value=\"10\">通道11</option>\n                <option value=\"11\">通道12</option>\n                <option value=\"12\">通道13</option>\n                <option value=\"13\">通道14</option>\n                <option value=\"14\">通道15</option>\n                <option value=\"15\">通道16</option>\n            `;\n        }\n        $('select').niceSelect('update');\n        // 写入localStorage\n        const valueAndLocalStorageMap = {\n            '#1主变A相': 'phaseA',\n            '#1主变B相': 'phaseB',\n            '#1主变C相': 'phaseC',\n            'T041间隔': 'phaseT'\n        };\n        localStorage.setItem('currentPhase', valueAndLocalStorageMap[selDevice.value]);\n    })\n    // RPC函数\n    function controlWav(deviceID, method, ch) {\n        var url =\n            '/C5085/api/plugins/rpc/twoway/' +\n            deviceID;\n        var payload = {\n            method: method,\n            params: ch\n        };\n        var username = self.ctx.settings.username;\n        var password = self.ctx.settings.password;\n        var auth = 'Basic ' + btoa(username + ':' +\n            password);\n        var jwtToken = localStorage.getItem(\n            'jwt_token');\n        var bearer = 'Bearer ' + jwtToken;\n        var headers = {\n            'Content-Type': 'application/json',\n            'Authorization': auth,\n            'X-Authorization': bearer\n        };\n        $.ajax({\n            url: url,\n            type: 'POST',\n            headers: headers,\n            data: JSON.stringify(\n                payload),\n            success: function(\n                response) {\n                console.log(\n                    response);\n            },\n            error: function(xhr, status,\n                error) {\n                console.error(xhr\n                    .responseText\n                );\n            }\n        });\n    }\n    \n    // 通道选择框绑定事件,下发RPC\n    $('#select-channel').on('change', function() {\n        const deviceID = allDeviceID[selDevice\n            .value];\n        const ch = selChannel.value;\n        console.log('deviceID', deviceID);\n        controlWav(self.ctx.lastSelDev,\n            methodStop, ch);\n        var wavData = controlWav(deviceID,\n            methodStart, ch);\n        self.ctx.lastSelDev = deviceID;\n        // TODO：更新波形图\n    })\n\n    // 初始化波形图\n    var chartDom = document.getElementById(\n        'echart-boxing');\n    var mychart = echarts.init(chartDom, null, {renderer: 'svg'});\n    var option = {\n        // backgroundColor: \"#060e19\",\n        color: [\"#0586f7\"],\n        legend: {\n            show: false\n        },\n        xAxis: {\n            type: \"category\",\n            axisLine: {\n                lineStyle: {\n                    color: \"#0885fa\",\n                },\n            },\n\n            boundaryGap: true,\n            splitLine: {\n                show: false,\n            },\n            axisLabel: {\n                // interval: 0\n                show: false\n            },\n            data: [],\n        },\n        grid: {\n            left: \"3%\",\n            right: \"4%\",\n            top: \"10%\",\n            bottom: \"4%\",\n            containLabel: true,\n        },\n        yAxis: {\n            // max: 0.04,\n            // min: -0.04,\n            splitLine: {\n                lineStyle: {\n                    color: \"#0885fa\",\n                },\n            },\n            name: '单位: mV',\n            nameTextStyle: {\n                color: '#fff',\n            },\n            //nameRotate: 90,\n            //nameLocation: 'middle',\n            axisLabel: {\n                textStyle: {\n                    color: \"#fff\",\n                },\n            },\n        },\n        series: [{\n            // name: \"boxing\",\n             type: \"line\",\n            // smooth: 1,\n            // symbol: \"none\",\n            // lineStyle: {\n            //     normal: {\n            //         width: 0,\n            //     },\n            // },\n            // areaStyle: {\n            //     normal: {\n            //         opacity: 1,\n            //     },\n            // },\n            data: [],\n        }, ],\n        animation: false,\n    };\n    option && mychart.setOption(option);\n    self.ctx.mychart = mychart;\n\n    // 初始时默认选择C相1通道\n    \n    \n    // 初始时默认上送C相变通道1的波形\n    var wavData = controlWav(allDeviceID['#1主变C相'],\n        methodStart, 0);\n    self.ctx.lastSelDev = allDeviceID['#1主变C相'];\n   \n\n\n}\n\nself.onDataUpdated = function() {\n    var mychart = self.ctx.mychart;\n    var option = mychart.getOption();\n    var dataX = [];\n    var dataY = [];\n   // console.log('self.ctx.data', self.ctx.data);\n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var currentDeviceData = self.ctx.data[i];\n        if (currentDeviceData.datasource.entityId ===\n            self.ctx.lastSelDev) {\n            console.log(\n                'Yes, this is the wanted device');\n            var dataSet = currentDeviceData.data;\n            for (var d = 0; d < dataSet.length; d++) {\n                var tsValuePair = dataSet[d];\n                var ts = tsValuePair[0];\n                if (tsValuePair[1] != '') {\n                    var value = JSON.parse(tsValuePair[\n                        1]);\n                    var waveData = value[\"wave\"];\n                    for (var j = 0; j < waveData\n                        .length; j++) {\n                        dataX.push(j.toString());\n                        dataY.push(waveData[j]);\n                    }\n                }\n            }\n        }\n    }\n    mychart.setOption({\n        xAxis: {\n            data: dataX,\n        },\n        series: [{\n            name: \"boxing\",\n            data: dataY,\n        }],\n    });\n}\n\nself.onResize = function() {\n    self.ctx.mychart.resize({\n        width: self.ctx.width,\n        height: self.ctx.height * 0.8,\n    })\n}\n\nself.onDestroy = function() {\n\n}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"phaseAID\": {\n                \"title\": \"#1主变A相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"aa\"\n            },\n            \"phaseBID\": {\n                \"title\": \"#1主变B相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"bb\"\n            },\n            \"phaseCID\": {\n                \"title\": \"#1主变C相的设备id\",\n                \"type\": \"string\",\n                \"default\": \"cc\"\n            },\n            \"phaseTID\": {\n                \"title\": \"T041间隔的设备id\",\n                \"type\": \"string\",\n                \"default\": \"tt\"\n            },\n            \"username\": {\n                \"title\": \"thingboard登录用户名\",\n                \"type\": \"string\",\n                \"default\": \"crysound@crysound.com\"\n            },\n            \"password\": {\n                \"title\": \"thingboard登录密码\",\n                \"type\": \"string\",\n                \"default\": \"crysound\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"phaseAID\",\n        \"phaseBID\",\n        \"phaseCID\",\n        \"phaseTID\",\n        \"username\",\n        \"password\"\n\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"波形图V1.0\"}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095959,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c85e270-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_v1_02",
    "name" : "事件类型统计V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "/C5085/tbresource/Echart.js"
      } ],
      "templateHtml" : "<div class=\"box-voicetype\">\n    <div class=\"title\">事件类型统计</div>\n    <div id=\"echart-voicetype\" style=\"width: 100%; height:100%\">\n        \n    </div>\n</div>",
      "templateCss" : ".box-voicetype {\n    height:100%;\n\tmin-height:100px;\n\tbackground-image:url(\"/C5085/tbresource/images/panel.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tbox-sizing:border-box;\n}\n\n.box-voicetype .title {\n    font-weight:normal;\n\tcolor:#fff;\n\tbackground-image:url(\"/C5085/tbresource/images/title-bg.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tpadding-left: 25px;\n}",
      "controllerScript" : "const vocieType = {\n    'byq_jbfd': '局部放电',\n    'byq_zlpc': '直流偏磁',\n    'byq_dlcj': '短路冲击',\n    'byq_jjsd': '夹件松动',\n    'byq_zgz': '重过载',\n    'byq_lqqyx': '冷却器异响',\n    'byq_zgz_jbfd': '混合样本'\n}\n\nself.onInit = function() {\n    self.ctx.allTypeCount = {\n        'byq_jbfd': 5,\n        'byq_zlpc': 10,\n        'byq_dlcj': 5,\n        'byq_jjsd': 10,\n        'byq_zgz': 5,\n        'byq_lqqyx': 10,\n        'byq_zgz_jbfd': 5\n    }\n\n    var dom = document.getElementById(\n        'echart-voicetype');\n    var myChart = echarts.init(dom, null, {renderer: 'svg'});\n    var option;\n\n    option = {\n        xAxis: {\n            type: 'category',\n            data: ['局部放电', '直流偏磁', '短路冲击', '夹件松动', '重过载', '冷却器异响', '混合样本'],\n            axisLabel: {\n                color: \"#fff\",\n                rotate: 30,\n                fontSize: 15\n            }\n        },\n        yAxis: {\n            type: 'value',\n            axisLabel: {\n                color: \"#ffffff\"\n            }\n        },\n        grid: {\n            bottom: '20%'\n        },\n        series: [{\n            data: [10, 20, 15, 10, 5, 15, 10],\n            type: 'bar',\n            showBackground: true,\n            backgroundStyle: {\n                color: 'rgba(180, 180, 180, 0.2)'\n            },\n            itemStyle: {\n                // 设置每个柱子的颜色\n                color: function(params) {\n                    var colorList = [\n                        '#0b69e6',\n                        '#5ad8a6',\n                        '#34d2ff',\n                        '#034b5f',\n                        '#1a8070',\n                        '#1b8faf',\n                        '#0799f3'\n                    ];\n                    return colorList[\n                        params\n                        .dataIndex];\n                }\n            },\n            label: {\n                color: \"#ffffff\"\n            }\n        }]\n    };\n    console.log('echart加载完毕')\n    myChart.setOption(option);\n    self.ctx.mychart = myChart;\n}\n\nconst allType = ['byq_jbfd', 'byq_zlpc', 'byq_dlcj', 'byq_jjsd', 'byq_zgz', 'byq_lqqyx', 'byq_zgz_jbfd'];\n\nself.onDataUpdated = function() {\n    var recording = {\n        '#1主变A相': {\n            airesult: 0,\n            aitype: ''\n        },\n        '#1主变B相': {\n            airesult: 0,\n            aitype: ''\n        },\n        '#1主变C相': {\n            airesult: 0,\n            aitype: ''\n        },\n        'T041间隔': {\n            airesult: 0,\n            aitype: ''\n        },\n    }\n    \n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var curData = self.ctx.data[i];\n        if (curData.data[0]) {\n            if (curData.dataKey.name === 'airesult') {\n                recording[curData.datasource.name].airesult = curData.data[0][1];\n            }\n            if (curData.dataKey.name === 'aitype') {\n                recording[curData.datasource.name].aitype = curData.data[0][1];\n            }\n        }\n    }\n    \n    function updateRecording(deviceName) {\n        if (recording[deviceName].airesult === 1) {\n            let type = recording[deviceName].aitype;\n            if (allType.include(type)) {\n                self.ctx.allTypeCount[type] += 1;\n            } else {\n                self.ctx.allTypeCount['byq_zgz_jbfd'] += 1;\n            }\n            \n        }\n    }\n    updateRecording('#1主变A相');\n    updateRecording('#1主变B相');\n    updateRecording('#1主变C相');\n    updateRecording('T041间隔');\n    \n    \n    // 更新图表\n    var mychart = self.ctx.mychart;\n    var option = mychart.getOption();\n    var data = new Array(self.ctx.allTypeCount['byq_jbfd'], self.ctx.allTypeCount['byq_zlpc'], self.ctx.allTypeCount['byq_dlcj'], self.ctx.allTypeCount['byq_jjsd'], self.ctx.allTypeCount['byq_zgz'], self.ctx.allTypeCount['byq_lqqyx'], self.ctx.allTypeCount['byq_zgz_jbfd']);\n    mychart.setOption({\n        series:{\n            data: data\n        }\n    })\n}\n\nself.onResize = function() {\n    self.ctx.mychart.resize({\n        width: self.ctx.width,\n        height: self.ctx.height,\n    })\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"事件类型统计V1.0\"}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095973,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c880550-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  }, {
    "alias" : "_v1_04",
    "name" : "声像卫士嵌入V1.0",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"iframebox\">\n    <div class=\"title\">声像卫士</div>\n    <div style=\"overflow:hidden; width: 100%; height: 100%\">\n        <iframe id=\"shengxiang-iframe\" width=\"100%\"\n            height=\"100%\" style=\"overflow:hidden;\"\n            scrolling=\"no\"></iframe>\n    </div>\n\n</div>",
      "templateCss" : ".iframebox {\n    height:100%;\n\tmin-height:100px;\n\tbackground-image:url(\"/C5085/tbresource/images/panel.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tbox-sizing:border-box;\n}\n\n.iframebox .title {\n    font-weight:normal;\n\tcolor:#fff;\n\tbackground-image:url(\"/C5085/tbresource/images/title-bg.png\");\n\tbackground-repeat:no-repeat;\n\tbackground-size:100% 100%;\n\tpadding-left: 25px;\n}",
      "controllerScript" : "self.onInit = function() {\n    // 重写setItem事件\n    var orignSetItem = window.localStorage.setItem;\n    window.localStorage.setItem = function(key, newValue) {\n        var newSetItemEvent = new Event(\n            \"newSetItemEvent\");\n\n        newSetItemEvent.key = key\n        newSetItemEvent.newValue = newValue;\n\n        window.dispatchEvent(\n            newSetItemEvent); // 抛出自定义事件\n        orignSetItem.apply(this, [key, newValue]);\n    }\n    \n    // 监听localStorage变化\n    window.addEventListener('newSetItemEvent', function(\n        event) {\n        if (event.key === 'currentPhase') {\n            var phase = event.newValue;\n            //修改iframe的src\n            document.getElementById('shengxiang-iframe').src = self.ctx.settings[phase];\n            console.log('self.ctx.settings[phase];',self.ctx.settings[phase]);\n        }\n    });\n    \n    // 默认显示A相变对应的声像卫士\n     document.getElementById('shengxiang-iframe').src = self.ctx.settings['phaseA']; \n     console.log('iframe src', document.getElementById('shengxiang-iframe').src);\n\n}\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n    if (self.ctx.width >= 600) {\n        $('#shengxiang-iframe').attr('width', '100%');\n        $('#shengxiang-iframe').attr('height', '100%');\n        $('#shengxiang-iframe').attr('style', 'overflow:hidden;');\n    } else {\n        $('#shengxiang-iframe').attr('width', '800px');\n        $('#shengxiang-iframe').attr('height', '800px');\n        $('#shengxiang-iframe').attr('style', 'overflow:hidden; margin:-100px 0px 0px -100px');\n    }\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"EntitiesTableSettings\",\r\n        \"properties\": {\r\n            \"phaseA\": {\r\n                \"title\": \"#1主变A相对应的声像卫士IP\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"phaseB\": {\r\n                \"title\": \"#1主变B相对应的声像卫士IP\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"phaseC\": {\r\n                \"title\": \"#1主变C相对应的声像卫士IP\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"phaseT\": {\r\n                \"title\": \"T041间隔对应的声像卫士IP\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            }\r\n        },\r\n        \"required\": []\r\n    },\r\n    \"form\": [\r\n        \"phaseA\",\r\n        \"phaseB\",\r\n        \"phaseC\",\r\n        \"phaseT\"\r\n\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"声像卫士嵌入V1.0\"}"
    },
    "bundleAlias" : "data_vision2",
    "createdTime" : 1688517095983,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4c898bf0-1acb-11ee-84c7-59378f85ce5f"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "2b2f3710-1a04-11ee-af0b-3bb8967337dd"
    }
  } ],
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}